<Type Name="IDatabaseFacadeDependencies" FullName="Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies">
  <TypeSignature Language="C#" Value="public interface IDatabaseFacadeDependencies" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDatabaseFacadeDependencies" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDatabaseFacadeDependencies" />
  <TypeSignature Language="F#" Value="type IDatabaseFacadeDependencies = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CommandLogger">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt; CommandLogger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Database/Command&gt; CommandLogger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.CommandLogger" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandLogger As IDiagnosticsLogger(Of DbLoggerCategory.Database.Command)" />
      <MemberSignature Language="F#" Value="member this.CommandLogger : Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.CommandLogger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Database+Command&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcurrencyDetector">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector ConcurrencyDetector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector ConcurrencyDetector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.ConcurrencyDetector" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConcurrencyDetector As IConcurrencyDetector" />
      <MemberSignature Language="F#" Value="member this.ConcurrencyDetector : Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector" Usage="Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.ConcurrencyDetector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseCreator">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator DatabaseCreator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator DatabaseCreator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.DatabaseCreator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DatabaseCreator As IDatabaseCreator" />
      <MemberSignature Language="F#" Value="member this.DatabaseCreator : Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator" Usage="Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.DatabaseCreator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseProviders">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider&gt; DatabaseProviders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider&gt; DatabaseProviders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.DatabaseProviders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DatabaseProviders As IEnumerable(Of IDatabaseProvider)" />
      <MemberSignature Language="F#" Value="member this.DatabaseProviders : seq&lt;Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider&gt;" Usage="Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.DatabaseProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionStrategyFactory">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory ExecutionStrategyFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory ExecutionStrategyFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.ExecutionStrategyFactory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionStrategyFactory As IExecutionStrategyFactory" />
      <MemberSignature Language="F#" Value="member this.ExecutionStrategyFactory : Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" Usage="Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.ExecutionStrategyFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionManager">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager TransactionManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager TransactionManager" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.TransactionManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransactionManager As IDbContextTransactionManager" />
      <MemberSignature Language="F#" Value="member this.TransactionManager : Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager" Usage="Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies.TransactionManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
