<Type Name="EFPropertyExtensions" FullName="Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions">
  <TypeSignature Language="C#" Value="public static class EFPropertyExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EFPropertyExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module EFPropertyExtensions" />
  <TypeSignature Language="F#" Value="type EFPropertyExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateEFPropertyExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateEFPropertyExpression (this System.Linq.Expressions.Expression target, System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateEFPropertyExpression(class System.Linq.Expressions.Expression target, class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="F#" Value="static member CreateEFPropertyExpression : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.CreateEFPropertyExpression (target, memberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" />
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="memberInfo">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEFPropertyExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateEFPropertyExpression (this System.Linq.Expressions.Expression target, Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property, bool makeNullable = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateEFPropertyExpression(class System.Linq.Expressions.Expression target, class Microsoft.EntityFrameworkCore.Metadata.IPropertyBase property, bool makeNullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.CreateEFPropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateEFPropertyExpression (target As Expression, property As IPropertyBase, Optional makeNullable As Boolean = true) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateEFPropertyExpression : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IPropertyBase * bool -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.CreateEFPropertyExpression (target, property, makeNullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" />
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IPropertyBase" />
        <Parameter Name="makeNullable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="property">To be added.</param>
        <param name="makeNullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyAccessExpression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression CreateKeyAccessExpression (this System.Linq.Expressions.Expression target, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, bool makeNullable = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression CreateKeyAccessExpression(class System.Linq.Expressions.Expression target, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; properties, bool makeNullable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.CreateKeyAccessExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateKeyAccessExpression (target As Expression, properties As IReadOnlyList(Of IProperty), Optional makeNullable As Boolean = false) As Expression" />
      <MemberSignature Language="F#" Value="static member CreateKeyAccessExpression : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt; * bool -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.CreateKeyAccessExpression (target, properties, makeNullable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.Expression" RefType="this" />
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty&gt;" />
        <Parameter Name="makeNullable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="properties">To be added.</param>
        <param name="makeNullable">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEFIndexer">
      <MemberSignature Language="C#" Value="public static bool IsEFIndexer (this System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEFIndexer(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.IsEFIndexer(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="static member IsEFIndexer : System.Linq.Expressions.MethodCallExpression -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.IsEFIndexer methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEFIndexer">
      <MemberSignature Language="C#" Value="public static bool IsEFIndexer (this System.Reflection.MethodInfo methodInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEFIndexer(class System.Reflection.MethodInfo methodInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.IsEFIndexer(System.Reflection.MethodInfo)" />
      <MemberSignature Language="F#" Value="static member IsEFIndexer : System.Reflection.MethodInfo -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.IsEFIndexer methodInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" RefType="this" />
      </Parameters>
      <Docs>
        <param name="methodInfo">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetEFIndexerArguments">
      <MemberSignature Language="C#" Value="public static bool TryGetEFIndexerArguments (this System.Linq.Expressions.MethodCallExpression methodCallExpression, out System.Linq.Expressions.Expression entityExpression, out string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetEFIndexerArguments(class System.Linq.Expressions.MethodCallExpression methodCallExpression, [out] class System.Linq.Expressions.Expression&amp; entityExpression, [out] string&amp; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.TryGetEFIndexerArguments(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression@,System.String@)" />
      <MemberSignature Language="F#" Value="static member TryGetEFIndexerArguments : System.Linq.Expressions.MethodCallExpression * Expression * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions.TryGetEFIndexerArguments (methodCallExpression, entityExpression, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" RefType="this" />
        <Parameter Name="entityExpression" Type="System.Linq.Expressions.Expression" RefType="out" />
        <Parameter Name="propertyName" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <param name="entityExpression">To be added.</param>
        <param name="propertyName">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
