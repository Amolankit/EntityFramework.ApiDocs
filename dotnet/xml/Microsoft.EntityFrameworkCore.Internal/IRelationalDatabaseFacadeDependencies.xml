<Type Name="IRelationalDatabaseFacadeDependencies" FullName="Microsoft.EntityFrameworkCore.Internal.IRelationalDatabaseFacadeDependencies">
  <TypeSignature Language="C#" Value="public interface IRelationalDatabaseFacadeDependencies : Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRelationalDatabaseFacadeDependencies implements class Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.IRelationalDatabaseFacadeDependencies" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRelationalDatabaseFacadeDependencies&#xA;Implements IDatabaseFacadeDependencies" />
  <TypeSignature Language="F#" Value="type IRelationalDatabaseFacadeDependencies = interface&#xA;    interface IDatabaseFacadeDependencies" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="RawSqlCommandBuilder">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder RawSqlCommandBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder RawSqlCommandBuilder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IRelationalDatabaseFacadeDependencies.RawSqlCommandBuilder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawSqlCommandBuilder As IRawSqlCommandBuilder" />
      <MemberSignature Language="F#" Value="member this.RawSqlCommandBuilder : Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder" Usage="Microsoft.EntityFrameworkCore.Internal.IRelationalDatabaseFacadeDependencies.RawSqlCommandBuilder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationalConnection">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.IRelationalConnection RelationalConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Storage.IRelationalConnection RelationalConnection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Internal.IRelationalDatabaseFacadeDependencies.RelationalConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelationalConnection As IRelationalConnection" />
      <MemberSignature Language="F#" Value="member this.RelationalConnection : Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" Usage="Microsoft.EntityFrameworkCore.Internal.IRelationalDatabaseFacadeDependencies.RelationalConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
