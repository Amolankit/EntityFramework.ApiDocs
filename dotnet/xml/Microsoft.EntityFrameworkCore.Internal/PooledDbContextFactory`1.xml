<Type Name="PooledDbContextFactory&lt;TContext&gt;" FullName="Microsoft.EntityFrameworkCore.Internal.PooledDbContextFactory&lt;TContext&gt;">
  <TypeSignature Language="C#" Value="public class PooledDbContextFactory&lt;TContext&gt; : Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt; where TContext : DbContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PooledDbContextFactory`1&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt; extends System.Object implements class Microsoft.EntityFrameworkCore.IDbContextFactory`1&lt;!TContext&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Internal.PooledDbContextFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class PooledDbContextFactory(Of TContext)&#xA;Implements IDbContextFactory(Of TContext)" />
  <TypeSignature Language="F#" Value="type PooledDbContextFactory&lt;'Context (requires 'Context :&gt; DbContext)&gt; = class&#xA;    interface IDbContextFactory&lt;'Context (requires 'Context :&gt; DbContext)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.IDbContextFactory&lt;TContext&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TContext">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PooledDbContextFactory (Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;TContext&gt; pool);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Internal.IDbContextPool`1&lt;!TContext&gt; pool) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.PooledDbContextFactory`1.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbContextPool{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pool As IDbContextPool(Of TContext))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Internal.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; : Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; -&gt; Microsoft.EntityFrameworkCore.Internal.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt;" Usage="new Microsoft.EntityFrameworkCore.Internal.PooledDbContextFactory&lt;'Context (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; pool" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pool" Type="Microsoft.EntityFrameworkCore.Internal.IDbContextPool&lt;TContext&gt;" />
      </Parameters>
      <Docs>
        <param name="pool">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbContext">
      <MemberSignature Language="C#" Value="public virtual TContext CreateDbContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TContext CreateDbContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Internal.PooledDbContextFactory`1.CreateDbContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDbContext () As TContext" />
      <MemberSignature Language="F#" Value="abstract member CreateDbContext : unit -&gt; 'Context&#xA;override this.CreateDbContext : unit -&gt; 'Context" Usage="pooledDbContextFactory.CreateDbContext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.IDbContextFactory`1.CreateDbContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
