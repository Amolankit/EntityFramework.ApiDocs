<Type Name="IRelationalTypeMappingSource" FullName="Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource">
  <TypeSignature Language="C#" Value="public interface IRelationalTypeMappingSource : Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRelationalTypeMappingSource implements class Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRelationalTypeMappingSource&#xA;Implements ITypeMappingSource" />
  <TypeSignature Language="F#" Value="type IRelationalTypeMappingSource = interface&#xA;    interface ITypeMappingSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    The relational type mapping interface for EF Core, starting with version 2.1. Type mappings describe how a
                    provider maps CLR types/values to database types/values.
                </para>
      <para>
                    Warning: do not implement this interface directly. Instead, derive from <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" />.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (Microsoft.EntityFrameworkCore.Metadata.IProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(class Microsoft.EntityFrameworkCore.Metadata.IProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMapping (property As IProperty) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Microsoft.EntityFrameworkCore.Metadata.IProperty -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="iRelationalTypeMappingSource.FindMapping property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.EntityFrameworkCore.Metadata.IProperty" />
      </Parameters>
      <Docs>
        <param name="property"> The property. </param>
        <summary>
                Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMapping (member As MemberInfo) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : System.Reflection.MemberInfo -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="iRelationalTypeMappingSource.FindMapping member" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="member"> The field or property. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (string storeTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(string storeTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMapping (storeTypeName As String) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : string -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="iRelationalTypeMappingSource.FindMapping storeTypeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storeTypeName"> The database type name. </param>
        <summary>
          <para>
                    Finds the type mapping for a given database type name.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="iRelationalTypeMappingSource.FindMapping type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"> The CLR type. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)" /></para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (Type type, string storeTypeName, bool keyOrIndex = false, Nullable&lt;bool&gt; unicode = null, Nullable&lt;int&gt; size = null, Nullable&lt;bool&gt; rowVersion = null, Nullable&lt;bool&gt; fixedLength = null, Nullable&lt;int&gt; precision = null, Nullable&lt;int&gt; scale = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(class System.Type type, string storeTypeName, bool keyOrIndex, valuetype System.Nullable`1&lt;bool&gt; unicode, valuetype System.Nullable`1&lt;int32&gt; size, valuetype System.Nullable`1&lt;bool&gt; rowVersion, valuetype System.Nullable`1&lt;bool&gt; fixedLength, valuetype System.Nullable`1&lt;int32&gt; precision, valuetype System.Nullable`1&lt;int32&gt; scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Type,System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type * string * bool * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="iRelationalTypeMappingSource.FindMapping (type, storeTypeName, keyOrIndex, unicode, size, rowVersion, fixedLength, precision, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="storeTypeName" Type="System.String" />
        <Parameter Name="keyOrIndex" Type="System.Boolean" />
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="size" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="rowVersion" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fixedLength" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="precision" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="scale" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="type"> The CLR type. </param>
        <param name="storeTypeName"> The database type name. </param>
        <param name="keyOrIndex"> If <c>true</c>, then a special mapping for a key or index may be returned. </param>
        <param name="unicode"> Specifies Unicode or Ansi mapping, or <c>null</c> for default. </param>
        <param name="size"> Specifies a size for the mapping, or <c>null</c> for default. </param>
        <param name="rowVersion"> Specifies a row-version, or <c>null</c> for default. </param>
        <param name="fixedLength"> Specifies a fixed length mapping, or <c>null</c> for default. </param>
        <param name="precision"> Specifies a precision for the mapping, or <c>null</c> for default. </param>
        <param name="scale"> Specifies a scale for the mapping, or <c>null</c> for default. </param>
        <summary>
          <para>
                    Finds the type mapping for a given <see cref="T:System.Type" /> and additional facets.
                </para>
          <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /></para>
        </summary>
        <returns> The type mapping, or <c>null</c> if none was found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
