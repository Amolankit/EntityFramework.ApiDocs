<Type Name="IConventionModel" FullName="Microsoft.EntityFrameworkCore.Metadata.IConventionModel">
  <TypeSignature Language="C#" Value="public interface IConventionModel : Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, Microsoft.EntityFrameworkCore.Metadata.IModel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConventionModel implements class Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable, class Microsoft.EntityFrameworkCore.Metadata.IModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.IConventionModel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionModel&#xA;Implements IConventionAnnotatable, IModel" />
  <TypeSignature Language="F#" Value="type IConventionModel = interface&#xA;    interface IModel&#xA;    interface IAnnotatable&#xA;    interface IConventionAnnotatable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.IModel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Metadata about the shape of entities, the relationships between them, and how they map to
                    the database. A model is typically created by overriding the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method on a derived
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
      <para>
                    This interface is used during model creation and allows the metadata to be modified.
                    Once the model is built, <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> represents a read-only view of the same metadata.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType (string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddEntityType (name As String, Optional fromDataAnnotation As Boolean = false) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionModel.AddEntityType (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity to be added. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
          <para>
                    Adds a shadow state entity type to the model.
                </para>
          <para>
                    Shadow entities are not currently supported in a model that is used at runtime with a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                    Therefore, shadow state entity types will only exist in migration model snapshots, etc.
                </para>
        </summary>
        <returns> The new entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType (Type clrType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType(class System.Type clrType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddEntityType (clrType As Type, Optional fromDataAnnotation As Boolean = false) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionModel.AddEntityType (clrType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clrType"> The CLR class that is used to represent instances of the entity type. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds an entity type to the model.
            </summary>
        <returns> The new entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddEntityType (name As String, definingNavigationName As String, definingEntityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionModel.AddEntityType (name, definingNavigationName, definingEntityType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity type to be added. </param>
        <param name="definingNavigationName"> The defining navigation. </param>
        <param name="definingEntityType"> The defining entity type. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds an entity type with a defining navigation to the model.
            </summary>
        <returns> The new entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType (Type clrType, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType AddEntityType(class System.Type clrType, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddEntityType (clrType As Type, definingNavigationName As String, definingEntityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member AddEntityType : Type * string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionModel.AddEntityType (clrType, definingNavigationName, definingEntityType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clrType"> The CLR class that is used to represent instances of this entity type. </param>
        <param name="definingNavigationName"> The defining navigation. </param>
        <param name="definingEntityType"> The defining entity type. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Adds an entity type with a defining navigation to the model.
            </summary>
        <returns> The new entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIgnored">
      <MemberSignature Language="C#" Value="public void AddIgnored (string typeName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddIgnored(string typeName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddIgnored(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddIgnored (typeName As String, Optional fromDataAnnotation As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member AddIgnored : string * bool -&gt; unit" Usage="iConventionModel.AddIgnored (typeName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the entity type to be ignored. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Marks the given entity type name as ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Builder">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder Builder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder Builder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.Builder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Builder As IConventionModelBuilder" />
      <MemberSignature Language="F#" Value="member this.Builder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder" Usage="Microsoft.EntityFrameworkCore.Metadata.IConventionModel.Builder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the builder that can be used to configure this model.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.FindEntityType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindEntityType (name As String) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionModel.FindEntityType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity type to find. </param>
        <summary>
                Gets the entity with the given name. Returns <c>null</c> if no entity type with the given name is found
                or the entity type has a defining navigation.
            </summary>
        <returns> The entity type, or <c>null</c> if none are found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType (string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType FindEntityType(string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.FindEntityType(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindEntityType (name As String, definingNavigationName As String, definingEntityType As IConventionEntityType) As IConventionEntityType" />
      <MemberSignature Language="F#" Value="abstract member FindEntityType : string * string * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" Usage="iConventionModel.FindEntityType (name, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definingNavigationName" Type="System.String" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity type to find. </param>
        <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
        <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
        <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns <c>null</c> if no matching entity type is found.
            </summary>
        <returns> The entity type, or <c>null</c> if none are found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindIgnoredConfigurationSource">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource? FindIgnoredConfigurationSource (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt; FindIgnoredConfigurationSource(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.FindIgnoredConfigurationSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIgnoredConfigurationSource (typeName As String) As Nullable(Of ConfigurationSource)" />
      <MemberSignature Language="F#" Value="abstract member FindIgnoredConfigurationSource : string -&gt; Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;" Usage="iConventionModel.FindIgnoredConfigurationSource typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the entity type that could be ignored. </param>
        <summary>
                Indicates whether the given entity type name is ignored.
            </summary>
        <returns>
                The configuration source if the given entity type name is ignored,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt; GetEntityTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.GetEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntityTypes () As IEnumerable(Of IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityTypes : unit -&gt; seq&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;" Usage="iConventionModel.GetEntityTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets all entity types defined in the model.
            </summary>
        <returns> All entity types defined in the model. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public void RemoveEntityType (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEntityType (entityType As IConventionEntityType)" />
      <MemberSignature Language="F#" Value="abstract member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType -&gt; unit" Usage="iConventionModel.RemoveEntityType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
      </Parameters>
      <Docs>
        <param name="entityType"> The entity type to be removed. </param>
        <summary>
                Removes an entity type from the model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIgnored">
      <MemberSignature Language="C#" Value="public void RemoveIgnored (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveIgnored(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveIgnored(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveIgnored (typeName As String)" />
      <MemberSignature Language="F#" Value="abstract member RemoveIgnored : string -&gt; unit" Usage="iConventionModel.RemoveIgnored typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the ignored entity type to be removed. </param>
        <summary>
                Removes the ignored entity type name.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
