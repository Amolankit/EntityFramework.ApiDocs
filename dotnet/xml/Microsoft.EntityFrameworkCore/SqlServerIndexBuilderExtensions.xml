<Type Name="SqlServerIndexBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class SqlServerIndexBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SqlServerIndexBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SqlServerIndexBuilderExtensions" />
  <TypeSignature Language="F#" Value="type SqlServerIndexBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanSetIncludeProperties">
      <MemberSignature Language="C#" Value="public static bool CanSetIncludeProperties (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIncludeProperties(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIncludeProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIncludeProperties (indexBuilder As IConventionIndexBuilder, propertyNames As IReadOnlyList(Of String), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIncludeProperties : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIncludeProperties (indexBuilder, propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="propertyNames"> An array of property names to be used in 'include' clause. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given include properties can be set.
            </summary>
        <returns>
          <c>true</c> if the given include properties can be set. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsClustered">
      <MemberSignature Language="C#" Value="public static bool CanSetIsClustered (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, Nullable&lt;bool&gt; clustered, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIsClustered(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, valuetype System.Nullable`1&lt;bool&gt; clustered, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIsClustered (indexBuilder As IConventionIndexBuilder, clustered As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIsClustered (indexBuilder, clustered, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clustered" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="clustered"> A value indicating whether the index is clustered. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the index can be configured as clustered.
            </summary>
        <returns>
          <c>true</c> if the index can be configured as clustered. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsCreatedOnline">
      <MemberSignature Language="C#" Value="public static bool CanSetIsCreatedOnline (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, Nullable&lt;bool&gt; createdOnline, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanSetIsCreatedOnline(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, valuetype System.Nullable`1&lt;bool&gt; createdOnline, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CanSetIsCreatedOnline (indexBuilder As IConventionIndexBuilder, createdOnline As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="static member CanSetIsCreatedOnline : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * Nullable&lt;bool&gt; * bool -&gt; bool" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIsCreatedOnline (indexBuilder, createdOnline, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="createdOnline" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="createdOnline"> A value indicating whether the index is created with online option. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the index can be configured with online option when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerHasName">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerHasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerHasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerHasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerHasName : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerHasName (indexBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="name"> The name of the index. </param>
        <summary>
                Configures the name of the index in the database when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerInclude">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerInclude (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerInclude(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerInclude(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String[])" />
      <MemberSignature Language="F#" Value="static member ForSqlServerInclude : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerInclude (indexBuilder, propertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IncludeProperties")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0" />
        <Parameter Name="propertyNames" Type="System.String[]" Index="1" FrameworkAlternate="efcore-2.2;efcore-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-2.2">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="propertyNames"> An array of property names to be used in 'include' clause. </param>
        <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerInclude">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder ForSqlServerInclude (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder ForSqlServerInclude(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerInclude(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerInclude (indexBuilder As IConventionIndexBuilder, propertyNames As IReadOnlyList(Of String), Optional fromDataAnnotation As Boolean = false) As IConventionIndexBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerInclude : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerInclude (indexBuilder, propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IncludeProperties")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="propertyNames"> An array of property names to be used in 'include' clause. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerInclude&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; ForSqlServerInclude&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; includeExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; ForSqlServerInclude&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; includeExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerInclude``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerInclude(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), includeExpression As Expression(Of Func(Of TEntity, Object))) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerInclude : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerInclude (indexBuilder, includeExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IncludeProperties")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0" />
        <Parameter Name="includeExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="1" FrameworkAlternate="efcore-2.2;efcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="includeExpression">
          <para>
                    A lambda expression representing the property(s) to be included in the 'include' clause
                    (<c>blog =&gt; blog.Url</c>).
                </para>
          <para>
                    If multiple properties are to be included then specify an anonymous type including the
                    properties (<c>post =&gt; new { post.Title, post.BlogId }</c>).
                </para>
        </param>
        <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerIsClustered">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerIsClustered (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool clustered = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerIsClustered(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool clustered) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerIsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered (indexBuilder, clustered)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IsClustered")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
        <Parameter Name="clustered" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="clustered"> A value indicating whether the index is clustered. </param>
        <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerIsClustered">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder ForSqlServerIsClustered (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, Nullable&lt;bool&gt; clustered, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder ForSqlServerIsClustered(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, valuetype System.Nullable`1&lt;bool&gt; clustered, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerIsClustered (indexBuilder As IConventionIndexBuilder, clustered As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionIndexBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerIsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered (indexBuilder, clustered, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IsClustered")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clustered" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="clustered"> A value indicating whether the index is clustered. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerIsClustered&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; ForSqlServerIsClustered&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, bool clustered = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; ForSqlServerIsClustered&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, bool clustered) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerIsClustered(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), Optional clustered As Boolean = true) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerIsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsClustered (indexBuilder, clustered)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IsClustered")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-2.2;efcore-3.0" />
        <Parameter Name="clustered" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-2.2;efcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="clustered"> A value indicating whether the index is clustered. </param>
        <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerIsCreatedOnline">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerIsCreatedOnline (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool createdOnline = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder ForSqlServerIsCreatedOnline(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool createdOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerIsCreatedOnline : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsCreatedOnline (indexBuilder, createdOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IsCreatedOnline")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="createdOnline" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="createdOnline"> A value indicating whether the index is created with online option. </param>
        <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerIsCreatedOnline">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder ForSqlServerIsCreatedOnline (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, Nullable&lt;bool&gt; createdOnline, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder ForSqlServerIsCreatedOnline(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, valuetype System.Nullable`1&lt;bool&gt; createdOnline, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerIsCreatedOnline (indexBuilder As IConventionIndexBuilder, createdOnline As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionIndexBuilder" />
      <MemberSignature Language="F#" Value="static member ForSqlServerIsCreatedOnline : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsCreatedOnline (indexBuilder, createdOnline, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IsCreatedOnline")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="createdOnline" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="createdOnline"> A value indicating whether the index is created with online option. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForSqlServerIsCreatedOnline&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; ForSqlServerIsCreatedOnline&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, bool createdOnline = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; ForSqlServerIsCreatedOnline&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, bool createdOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsCreatedOnline``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ForSqlServerIsCreatedOnline(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), Optional createdOnline As Boolean = true) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member ForSqlServerIsCreatedOnline : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.ForSqlServerIsCreatedOnline (indexBuilder, createdOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Obsolete("Use IsCreatedOnline")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="createdOnline" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="createdOnline"> A value indicating whether the index is created with online option. </param>
        <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeProperties">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder IncludeProperties (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, params string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder IncludeProperties(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String[])" />
      <MemberSignature Language="F#" Value="static member IncludeProperties : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string[] -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties (indexBuilder, propertyNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="propertyNames" Type="System.String[]" Index="1" FrameworkAlternate="efcore-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="propertyNames"> An array of property names to be used in 'include' clause. </param>
        <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeProperties">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IncludeProperties (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IncludeProperties(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IncludeProperties (indexBuilder As IConventionIndexBuilder, propertyNames As IReadOnlyList(Of String), Optional fromDataAnnotation As Boolean = false) As IConventionIndexBuilder" />
      <MemberSignature Language="F#" Value="static member IncludeProperties : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties (indexBuilder, propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="propertyNames"> An array of property names to be used in 'include' clause. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeProperties&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; IncludeProperties&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; includeExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; IncludeProperties&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; includeExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IncludeProperties(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), includeExpression As Expression(Of Func(Of TEntity, Object))) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member IncludeProperties : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties (indexBuilder, includeExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="includeExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="includeExpression">
          <para>
                    A lambda expression representing the property(s) to be included in the 'include' clause
                    (<c>blog =&gt; blog.Url</c>).
                </para>
          <para>
                    If multiple properties are to be included then specify an anonymous type including the
                    properties (<c>post =&gt; new { post.Title, post.BlogId }</c>).
                </para>
        </param>
        <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClustered">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder IsClustered (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool clustered = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder IsClustered(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool clustered) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member IsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered (indexBuilder, clustered)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clustered" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="clustered"> A value indicating whether the index is clustered. </param>
        <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClustered">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IsClustered (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, Nullable&lt;bool&gt; clustered, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IsClustered(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, valuetype System.Nullable`1&lt;bool&gt; clustered, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsClustered (indexBuilder As IConventionIndexBuilder, clustered As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionIndexBuilder" />
      <MemberSignature Language="F#" Value="static member IsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered (indexBuilder, clustered, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clustered" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="clustered"> A value indicating whether the index is clustered. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClustered&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; IsClustered&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, bool clustered = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; IsClustered&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, bool clustered) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsClustered(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), Optional clustered As Boolean = true) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member IsClustered : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered (indexBuilder, clustered)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clustered" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="clustered"> A value indicating whether the index is clustered. </param>
        <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCreatedOnline">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder IsCreatedOnline (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool createdOnline = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder IsCreatedOnline(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, bool createdOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member IsCreatedOnline : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline (indexBuilder, createdOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="createdOnline" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="createdOnline"> A value indicating whether the index is created with online option. </param>
        <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCreatedOnline">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IsCreatedOnline (this Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, Nullable&lt;bool&gt; createdOnline, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder IsCreatedOnline(class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder indexBuilder, valuetype System.Nullable`1&lt;bool&gt; createdOnline, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsCreatedOnline (indexBuilder As IConventionIndexBuilder, createdOnline As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionIndexBuilder" />
      <MemberSignature Language="F#" Value="static member IsCreatedOnline : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder * Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline (indexBuilder, createdOnline, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="createdOnline" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="createdOnline"> A value indicating whether the index is created with online option. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCreatedOnline&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; IsCreatedOnline&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, bool createdOnline = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; IsCreatedOnline&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, bool createdOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsCreatedOnline(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), Optional createdOnline As Boolean = true) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member IsCreatedOnline : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline (indexBuilder, createdOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="createdOnline" Type="System.Boolean" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="createdOnline"> A value indicating whether the index is created with online option. </param>
        <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
