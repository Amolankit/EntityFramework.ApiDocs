<Type Name="MutableModelExtensions" FullName="Microsoft.EntityFrameworkCore.MutableModelExtensions">
  <TypeSignature Language="C#" Value="public static class MutableModelExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MutableModelExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.MutableModelExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module MutableModelExtensions" />
  <TypeSignature Language="F#" Value="type MutableModelExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.6.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddIgnored">
      <MemberSignature Language="C#" Value="public static void AddIgnored (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddIgnored(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.AddIgnored(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddIgnored (model As IMutableModel, clrType As Type)" />
      <MemberSignature Language="F#" Value="static member AddIgnored : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.AddIgnored (model, clrType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to add the ignored type to. </param>
        <param name="clrType"> The entity type to be ignored. </param>
        <summary>
                Marks the given entity type as ignored, preventing conventions from adding a matching entity type to the model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwned">
      <MemberSignature Language="C#" Value="public static void AddOwned (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddOwned(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.AddOwned(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddOwned (model As IMutableModel, clrType As Type)" />
      <MemberSignature Language="F#" Value="static member AddOwned : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.AddOwned (model, clrType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to add the owned type to. </param>
        <param name="clrType"> The type of the entity type that should be owned. </param>
        <summary>
                Marks the given entity type as owned, indicating that when discovered matching entity types
                should be configured as owned.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeModel">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IModel FinalizeModel (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IModel FinalizeModel(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FinalizeModel(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FinalizeModel (model As IMutableModel) As IModel" />
      <MemberSignature Language="F#" Value="static member FinalizeModel : Microsoft.EntityFrameworkCore.Metadata.IMutableModel -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.FinalizeModel model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to finalize. </param>
        <summary>
                Forces post-processing on the model such that it is ready for use by the runtime. This post
                processing happens automatically when using <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />; this method allows it to be run
                explicitly in cases where the automatic execution is not possible.
            </summary>
        <returns> The finalized <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The type to find the corresponding entity type for. </param>
        <summary>
                Gets the entity that maps the given entity class. Returns <c>null</c> if no entity type with the given name is found.
            </summary>
        <returns> The entity type, or <c>null</c> if none if found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType FindEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member FindEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType (model, type, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The type of the entity type to find. </param>
        <param name="definingNavigationName"> The defining navigation of the entity type to find. </param>
        <param name="definingEntityType"> The defining entity type of the entity type to find. </param>
        <summary>
                Gets the entity type for the given name, defining navigation name
                and the defining entity type. Returns <c>null</c> if no matching entity type is found.
            </summary>
        <returns> The entity type, or <c>null</c> if none are found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindLeastDerivedEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; FindLeastDerivedEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,bool&gt; condition = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; FindLeastDerivedEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type, class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindLeastDerivedEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.Func{Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Boolean})" />
      <MemberSignature Language="F#" Value="static member FindLeastDerivedEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, bool&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.FindLeastDerivedEntityTypes (model, type, condition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="condition" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Boolean&gt;" Index="2" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity types in. </param>
        <param name="type"> The base type. </param>
        <param name="condition"> An optional condition for filtering entity types. </param>
        <summary>
                Returns the entity types corresponding to the least derived types from the given.
            </summary>
        <returns> List of entity types corresponding to the least derived types from the given. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEntityTypes (model As IMutableModel, name As String) As IReadOnlyCollection(Of IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * string -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.GetEntityTypes (model, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="name"> The name of the entity type to find. </param>
        <summary>
                Gets the entity types matching the given name.
            </summary>
        <returns> The entity types found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntityTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetEntityTypes (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt; GetEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="F#" Value="static member GetEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.GetEntityTypes (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="efcore-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find the entity type in. </param>
        <param name="type"> The type of the entity type to find. </param>
        <summary>
                Gets the entity types matching the given type.
            </summary>
        <returns> The entity types found. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAddEntityType (model As IMutableModel, name As String) As IMutableEntityType" />
      <MemberSignature Language="F#" Value="static member GetOrAddEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType (model, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find or add the entity type to. </param>
        <param name="name"> The name of the entity type. </param>
        <summary>
                Gets the entity type with the given name or adds a new entity type if none is found.
            </summary>
        <returns> The existing or newly created entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType GetOrAddEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="F#" Value="static member GetOrAddEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-1.0;efcore-1.1;efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="model"> The model to find or add the entity type to. </param>
        <param name="type"> The CLR class of the entity type. </param>
        <summary>
                Gets the entity type with the given CLR class or adds a new entity type if none is found.
            </summary>
        <returns> The existing or newly created entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIgnored">
      <MemberSignature Language="C#" Value="public static bool IsIgnored (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIgnored(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.IsIgnored(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="F#" Value="static member IsIgnored : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.IsIgnored (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to check for ignored type. </param>
        <param name="type"> The entity type that might be ignored. </param>
        <summary>
                Indicates whether the given entity type name is ignored.
            </summary>
        <returns>
          <c>true</c> if the given entity type name is ignored. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOwned">
      <MemberSignature Language="C#" Value="public static bool IsOwned (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOwned(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.IsOwned(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOwned (model As IMutableModel, clrType As Type) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOwned : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; bool" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.IsOwned (model, clrType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to get the value from. </param>
        <param name="clrType"> The type of the entity type that might be owned. </param>
        <summary>
                Returns a value indicating whether the entity types using the given type should be configured
                as owned types when discovered by conventions.
            </summary>
        <returns>
          <c>true</c> if a matching entity type should be configured as owned when discovered,
                <c>false</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IMutableModel, entityType As IMutableEntityType) As IMutableEntityType" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, entityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="entityType"> The entity type to be removed. </param>
        <summary>
                Removes an entity type from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IMutableModel, name As String) As IMutableEntityType" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * string -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="name"> The name of the entity type to be removed. </param>
        <summary>
                Removes an entity type without a defining navigation from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="type"> The entity type to be removed. </param>
        <summary>
                Removes an entity type from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, string name, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveEntityType (model As IMutableModel, name As String, definingNavigationName As String, definingEntityType As IMutableEntityType) As IMutableEntityType" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * string * string * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, name, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="3" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="name"> The name of the entity type to be removed. </param>
        <param name="definingNavigationName"> The defining navigation. </param>
        <param name="definingEntityType"> The defining entity type. </param>
        <summary>
                Removes an entity type with a defining navigation from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntityType">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type, string definingNavigationName, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType RemoveEntityType(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type, string definingNavigationName, class Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType definingEntityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)" />
      <MemberSignature Language="F#" Value="static member RemoveEntityType : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type * string * Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType -&gt; Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType (model, type, definingNavigationName, definingEntityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
        <Parameter Name="definingNavigationName" Type="System.String" Index="2" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
        <Parameter Name="definingEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" Index="3" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the entity type from. </param>
        <param name="type"> The CLR class that is used to represent instances of this entity type. </param>
        <param name="definingNavigationName"> The defining navigation. </param>
        <param name="definingEntityType"> The defining entity type. </param>
        <summary>
                Removes an entity type with a defining navigation from the model.
            </summary>
        <returns> The entity type that was removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveIgnored">
      <MemberSignature Language="C#" Value="public static void RemoveIgnored (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveIgnored(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveIgnored(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="F#" Value="static member RemoveIgnored : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveIgnored (model, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the ignored entity type from. </param>
        <param name="type"> The ignored entity type to be removed. </param>
        <summary>
                Removes the ignored entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOwned">
      <MemberSignature Language="C#" Value="public static void RemoveOwned (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Type clrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveOwned(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, class System.Type clrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveOwned(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveOwned (model As IMutableModel, clrType As Type)" />
      <MemberSignature Language="F#" Value="static member RemoveOwned : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Type -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveOwned (model, clrType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="clrType" Type="System.Type" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to remove the owned type name from. </param>
        <param name="clrType"> The type of the entity type that should not be owned. </param>
        <summary>
                Removes the given owned type, indicating that when discovered matching entity types
                should not be configured as owned.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.ChangeTrackingStrategy)" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Microsoft.EntityFrameworkCore.ChangeTrackingStrategy -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy (model, changeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="changeTrackingStrategy" Type="Microsoft.EntityFrameworkCore.ChangeTrackingStrategy" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="model"> The model to set the default change tracking strategy for. </param>
        <param name="changeTrackingStrategy"> The strategy to use. </param>
        <summary>
                Sets the default change tracking strategy to use for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChangeTrackingStrategy">
      <MemberSignature Language="C#" Value="public static void SetChangeTrackingStrategy (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetChangeTrackingStrategy(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; changeTrackingStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.ChangeTrackingStrategy})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetChangeTrackingStrategy (model As IMutableModel, changeTrackingStrategy As Nullable(Of ChangeTrackingStrategy))" />
      <MemberSignature Language="F#" Value="static member SetChangeTrackingStrategy : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.SetChangeTrackingStrategy (model, changeTrackingStrategy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="changeTrackingStrategy" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.ChangeTrackingStrategy&gt;" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to set the default change tracking strategy for. </param>
        <param name="changeTrackingStrategy"> The strategy to use. </param>
        <summary>
                Sets the default change tracking strategy to use for entities in the model. This strategy indicates how the
                context detects changes to properties for an instance of an entity type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (model As IMutableModel, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
      <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode (model, propertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-1.1" />
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode&gt;" Index="1" FrameworkAlternate="efcore-1.1" />
      </Parameters>
      <Docs>
        <param name="model"> The model to set the access mode for. </param>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" />, or null to clear the mode set.</param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" /> to use for properties of all entity types
                    in this model.
                </para>
          <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value set here will
                    be used for any property for which no override has been specified.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public static void SetPropertyAccessMode (this Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetPropertyAccessMode(class Microsoft.EntityFrameworkCore.Metadata.IMutableModel model, valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetPropertyAccessMode (model As IMutableModel, propertyAccessMode As Nullable(Of PropertyAccessMode))" />
      <MemberSignature Language="F#" Value="static member SetPropertyAccessMode : Microsoft.EntityFrameworkCore.Metadata.IMutableModel * Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; -&gt; unit" Usage="Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode (model, propertyAccessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.3.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IMutableModel" RefType="this" Index="0" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" Index="1" FrameworkAlternate="efcore-2.0;efcore-2.1;efcore-2.2;efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="model"> The model to set the access mode for. </param>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" />, or <c>null</c> to clear the mode set.</param>
        <summary>
          <para>
                    Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for properties of all entity types
                    in this model.
                </para>
          <para>
                    Note that individual entity types can override this access mode, and individual properties of
                    entity types can override the access mode set on the entity type. The value set here will
                    be used for any property for which no override has been specified.
                </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
