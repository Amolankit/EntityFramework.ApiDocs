<Type Name="GeometryValueConverter&lt;TGeometry&gt;" FullName="Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter&lt;TGeometry&gt;">
  <TypeSignature Language="C#" Value="public class GeometryValueConverter&lt;TGeometry&gt; : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,System.Data.SqlTypes.SqlBytes&gt; where TGeometry : Geometry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GeometryValueConverter`1&lt;(class NetTopologySuite.Geometries.Geometry) TGeometry&gt; extends Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2&lt;!TGeometry, class System.Data.SqlTypes.SqlBytes&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public Class GeometryValueConverter(Of TGeometry)&#xA;Inherits ValueConverter(Of TGeometry, SqlBytes)" />
  <TypeSignature Language="F#" Value="type GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; Geometry)&gt; = class&#xA;    inherit ValueConverter&lt;'Geometry, SqlBytes (requires 'Geometry :&gt; Geometry)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite</AssemblyName>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TGeometry">
      <Constraints>
        <InterfaceName>GeoAPI.Geometries.IGeometry</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter&lt;TGeometry,System.Data.SqlTypes.SqlBytes&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">TGeometry</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">System.Data.SqlTypes.SqlBytes</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TGeometry">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeometryValueConverter (GeoAPI.IO.IBinaryGeometryReader reader, GeoAPI.IO.IBinaryGeometryWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GeoAPI.IO.IBinaryGeometryReader reader, class GeoAPI.IO.IBinaryGeometryWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter`1.#ctor(GeoAPI.IO.IBinaryGeometryReader,GeoAPI.IO.IBinaryGeometryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As IBinaryGeometryReader, writer As IBinaryGeometryWriter)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; : GeoAPI.IO.IBinaryGeometryReader * GeoAPI.IO.IBinaryGeometryWriter -&gt; Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; GeoAPI.Geometries.IGeometry)&gt; (reader, writer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="GeoAPI.IO.IBinaryGeometryReader" Index="0" FrameworkAlternate="efcore-2.2" />
        <Parameter Name="writer" Type="GeoAPI.IO.IBinaryGeometryWriter" Index="1" FrameworkAlternate="efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="writer">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeometryValueConverter (NetTopologySuite.IO.SqlServerBytesReader reader, NetTopologySuite.IO.SqlServerBytesWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class NetTopologySuite.IO.SqlServerBytesReader reader, class NetTopologySuite.IO.SqlServerBytesWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter`1.#ctor(NetTopologySuite.IO.SqlServerBytesReader,NetTopologySuite.IO.SqlServerBytesWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As SqlServerBytesReader, writer As SqlServerBytesWriter)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; : NetTopologySuite.IO.SqlServerBytesReader * NetTopologySuite.IO.SqlServerBytesWriter -&gt; Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt;" Usage="new Microsoft.EntityFrameworkCore.SqlServer.Storage.ValueConversion.Internal.GeometryValueConverter&lt;'Geometry (requires 'Geometry :&gt; NetTopologySuite.Geometries.Geometry)&gt; (reader, writer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="NetTopologySuite.IO.SqlServerBytesReader" Index="0" FrameworkAlternate="efcore-3.0" />
        <Parameter Name="writer" Type="NetTopologySuite.IO.SqlServerBytesWriter" Index="1" FrameworkAlternate="efcore-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="writer">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
