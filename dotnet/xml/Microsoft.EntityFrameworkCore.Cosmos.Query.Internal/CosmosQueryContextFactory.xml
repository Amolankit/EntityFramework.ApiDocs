<Type Name="CosmosQueryContextFactory" FullName="Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory">
  <TypeSignature Language="C#" Value="public class CosmosQueryContextFactory : Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosQueryContextFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Query.IQueryContextFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosQueryContextFactory&#xA;Implements IQueryContextFactory" />
  <TypeSignature Language="F#" Value="type CosmosQueryContextFactory = class&#xA;    interface IQueryContextFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.IQueryContextFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CosmosQueryContextFactory (Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper cosmosClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper cosmosClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies,Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryContextDependencies, cosmosClient As CosmosClientWrapper)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies * Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper -&gt; Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory" Usage="new Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory (dependencies, cosmosClient)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" />
        <Parameter Name="cosmosClient" Type="Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="cosmosClient">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.QueryContext Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.QueryContext Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory.Create" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create () As QueryContext" />
      <MemberSignature Language="F#" Value="abstract member Create : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryContext&#xA;override this.Create : unit -&gt; Microsoft.EntityFrameworkCore.Query.QueryContext" Usage="cosmosQueryContextFactory.Create " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Cosmos</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.QueryContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
