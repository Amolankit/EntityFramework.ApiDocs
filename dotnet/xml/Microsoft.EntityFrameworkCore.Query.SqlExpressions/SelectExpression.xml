<Type Name="SelectExpression" FullName="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression">
  <TypeSignature Language="C#" Value="public class SelectExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SelectExpression extends Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SelectExpression&#xA;Inherits TableExpressionBase" />
  <TypeSignature Language="F#" Value="type SelectExpression = class&#xA;    inherit TableExpressionBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddCollectionProjection">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression AddCollectionProjection (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression AddCollectionProjection(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCollectionProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Type)" />
      <MemberSignature Language="F#" Value="member this.AddCollectionProjection : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Type -&gt; Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression" Usage="selectExpression.AddCollectionProjection (shapedQueryExpression, navigation, elementType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        <Parameter Name="elementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="elementType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossApply">
      <MemberSignature Language="C#" Value="public void AddCrossApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCrossApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCrossApply (innerSelectExpression As SelectExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddCrossApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Type -&gt; unit" Usage="selectExpression.AddCrossApply (innerSelectExpression, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossJoin">
      <MemberSignature Language="C#" Value="public void AddCrossJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCrossJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCrossJoin (innerSelectExpression As SelectExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddCrossJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Type -&gt; unit" Usage="selectExpression.AddCrossJoin (innerSelectExpression, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInnerJoin">
      <MemberSignature Language="C#" Value="public void AddInnerJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInnerJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddInnerJoin (innerSelectExpression As SelectExpression, joinPredicate As SqlExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddInnerJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type -&gt; unit" Usage="selectExpression.AddInnerJoin (innerSelectExpression, joinPredicate, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">To be added.</param>
        <param name="joinPredicate">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLeftJoin">
      <MemberSignature Language="C#" Value="public void AddLeftJoin (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLeftJoin(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression joinPredicate, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLeftJoin (innerSelectExpression As SelectExpression, joinPredicate As SqlExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddLeftJoin : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type -&gt; unit" Usage="selectExpression.AddLeftJoin (innerSelectExpression, joinPredicate, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="joinPredicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">To be added.</param>
        <param name="joinPredicate">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOuterApply">
      <MemberSignature Language="C#" Value="public void AddOuterApply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, Type transparentIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOuterApply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression innerSelectExpression, class System.Type transparentIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOuterApply (innerSelectExpression As SelectExpression, transparentIdentifierType As Type)" />
      <MemberSignature Language="F#" Value="member this.AddOuterApply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * Type -&gt; unit" Usage="selectExpression.AddOuterApply (innerSelectExpression, transparentIdentifierType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerSelectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="transparentIdentifierType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="innerSelectExpression">To be added.</param>
        <param name="transparentIdentifierType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSingleProjection">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression AddSingleProjection (Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression AddSingleProjection(class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression shapedQueryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddSingleProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)" />
      <MemberSignature Language="F#" Value="member this.AddSingleProjection : Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.AddSingleProjection shapedQueryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shapedQueryExpression" Type="Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" />
      </Parameters>
      <Docs>
        <param name="shapedQueryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,int&gt; AddToProjection (Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression entityProjection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, int32&gt; AddToProjection(class Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression entityProjection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToProjection (entityProjection As EntityProjectionExpression) As IDictionary(Of IProperty, Integer)" />
      <MemberSignature Language="F#" Value="member this.AddToProjection : Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression -&gt; System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, int&gt;" Usage="selectExpression.AddToProjection entityProjection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityProjection" Type="Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" />
      </Parameters>
      <Docs>
        <param name="entityProjection">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToProjection">
      <MemberSignature Language="C#" Value="public int AddToProjection (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 AddToProjection(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.AddToProjection : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; int" Usage="selectExpression.AddToProjection sqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendOrdering">
      <MemberSignature Language="C#" Value="public void AppendOrdering (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendOrdering(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AppendOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)" />
      <MemberSignature Language="F#" Value="member this.AppendOrdering : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression -&gt; unit" Usage="selectExpression.AppendOrdering orderingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression" />
      </Parameters>
      <Docs>
        <param name="orderingExpression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyCollectionJoin">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ApplyCollectionJoin (int collectionIndex, int collectionId, System.Linq.Expressions.Expression innerShaper, Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, Type elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ApplyCollectionJoin(int32 collectionIndex, int32 collectionId, class System.Linq.Expressions.Expression innerShaper, class Microsoft.EntityFrameworkCore.Metadata.INavigation navigation, class System.Type elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyCollectionJoin(System.Int32,System.Int32,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCollectionJoin (collectionIndex As Integer, collectionId As Integer, innerShaper As Expression, navigation As INavigation, elementType As Type) As Expression" />
      <MemberSignature Language="F#" Value="member this.ApplyCollectionJoin : int * int * System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.INavigation * Type -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.ApplyCollectionJoin (collectionIndex, collectionId, innerShaper, navigation, elementType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionIndex" Type="System.Int32" />
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="innerShaper" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="navigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        <Parameter Name="elementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="collectionIndex">To be added.</param>
        <param name="collectionId">To be added.</param>
        <param name="innerShaper">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="elementType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDefaultIfEmpty">
      <MemberSignature Language="C#" Value="public void ApplyDefaultIfEmpty (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyDefaultIfEmpty(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyDefaultIfEmpty(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDefaultIfEmpty (sqlExpressionFactory As ISqlExpressionFactory)" />
      <MemberSignature Language="F#" Value="member this.ApplyDefaultIfEmpty : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory -&gt; unit" Usage="selectExpression.ApplyDefaultIfEmpty sqlExpressionFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDistinct">
      <MemberSignature Language="C#" Value="public void ApplyDistinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyDistinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyDistinct" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyDistinct ()" />
      <MemberSignature Language="F#" Value="member this.ApplyDistinct : unit -&gt; unit" Usage="selectExpression.ApplyDistinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyExcept">
      <MemberSignature Language="C#" Value="public void ApplyExcept (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyExcept(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyExcept (source2 As SelectExpression, distinct As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ApplyExcept : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; unit" Usage="selectExpression.ApplyExcept (source2, distinct)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="distinct" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source2">To be added.</param>
        <param name="distinct">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyGrouping">
      <MemberSignature Language="C#" Value="public void ApplyGrouping (System.Linq.Expressions.Expression keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyGrouping(class System.Linq.Expressions.Expression keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyGrouping(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyGrouping (keySelector As Expression)" />
      <MemberSignature Language="F#" Value="member this.ApplyGrouping : System.Linq.Expressions.Expression -&gt; unit" Usage="selectExpression.ApplyGrouping keySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="keySelector">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyIntersect">
      <MemberSignature Language="C#" Value="public void ApplyIntersect (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyIntersect(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyIntersect (source2 As SelectExpression, distinct As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ApplyIntersect : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; unit" Usage="selectExpression.ApplyIntersect (source2, distinct)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="distinct" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source2">To be added.</param>
        <param name="distinct">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyLimit">
      <MemberSignature Language="C#" Value="public void ApplyLimit (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyLimit(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyLimit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.ApplyLimit : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.ApplyLimit sqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOffset">
      <MemberSignature Language="C#" Value="public void ApplyOffset (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyOffset(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.ApplyOffset : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.ApplyOffset sqlExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOrdering">
      <MemberSignature Language="C#" Value="public void ApplyOrdering (Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyOrdering(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression orderingExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)" />
      <MemberSignature Language="F#" Value="member this.ApplyOrdering : Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression -&gt; unit" Usage="selectExpression.ApplyOrdering orderingExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression" />
      </Parameters>
      <Docs>
        <param name="orderingExpression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyPredicate">
      <MemberSignature Language="C#" Value="public void ApplyPredicate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPredicate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyPredicate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPredicate (expression As SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.ApplyPredicate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; unit" Usage="selectExpression.ApplyPredicate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyProjection">
      <MemberSignature Language="C#" Value="public void ApplyProjection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyProjection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyProjection" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyProjection ()" />
      <MemberSignature Language="F#" Value="member this.ApplyProjection : unit -&gt; unit" Usage="selectExpression.ApplyProjection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTags">
      <MemberSignature Language="C#" Value="public void ApplyTags (System.Collections.Generic.ISet&lt;string&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyTags(class System.Collections.Generic.ISet`1&lt;string&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyTags(System.Collections.Generic.ISet{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyTags (tags As ISet(Of String))" />
      <MemberSignature Language="F#" Value="member this.ApplyTags : System.Collections.Generic.ISet&lt;string&gt; -&gt; unit" Usage="selectExpression.ApplyTags tags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.ISet&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="tags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyUnion">
      <MemberSignature Language="C#" Value="public void ApplyUnion (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyUnion(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression source2, bool distinct) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyUnion (source2 As SelectExpression, distinct As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ApplyUnion : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; unit" Usage="selectExpression.ApplyUnion (source2, distinct)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="distinct" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source2">To be added.</param>
        <param name="distinct">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOrdering">
      <MemberSignature Language="C#" Value="public void ClearOrdering ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearOrdering() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ClearOrdering" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearOrdering ()" />
      <MemberSignature Language="F#" Value="member this.ClearOrdering : unit -&gt; unit" Usage="selectExpression.ClearOrdering " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="selectExpression.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="selectExpression.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMappedProjection">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetMappedProjection (Microsoft.EntityFrameworkCore.Query.ProjectionMember projectionMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression GetMappedProjection(class Microsoft.EntityFrameworkCore.Query.ProjectionMember projectionMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetMappedProjection(Microsoft.EntityFrameworkCore.Query.ProjectionMember)" />
      <MemberSignature Language="F#" Value="member this.GetMappedProjection : Microsoft.EntityFrameworkCore.Query.ProjectionMember -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.GetMappedProjection projectionMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionMember" Type="Microsoft.EntityFrameworkCore.Query.ProjectionMember" />
      </Parameters>
      <Docs>
        <param name="projectionMember">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; GroupBy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; GroupBy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupBy As IReadOnlyList(Of SqlExpression)" />
      <MemberSignature Language="F#" Value="member this.GroupBy : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Having">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Having { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Having" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Having As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Having : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDistinct">
      <MemberSignature Language="C#" Value="public bool IsDistinct { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDistinct" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDistinct As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDistinct : bool" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonComposedFromSql">
      <MemberSignature Language="C#" Value="public bool IsNonComposedFromSql ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNonComposedFromSql() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsNonComposedFromSql" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonComposedFromSql () As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNonComposedFromSql : unit -&gt; bool" Usage="selectExpression.IsNonComposedFromSql " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Limit">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Limit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Limit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Limit As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Limit : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Offset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Offset : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Orderings">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; Orderings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; Orderings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Orderings As IReadOnlyList(Of OrderingExpression)" />
      <MemberSignature Language="F#" Value="member this.Orderings : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predicate">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Predicate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression Predicate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Predicate As SqlExpression" />
      <MemberSignature Language="F#" Value="member this.Predicate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForAggregate">
      <MemberSignature Language="C#" Value="public void PrepareForAggregate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrepareForAggregate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.PrepareForAggregate" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareForAggregate ()" />
      <MemberSignature Language="F#" Value="member this.PrepareForAggregate : unit -&gt; unit" Usage="selectExpression.PrepareForAggregate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public override void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="F#" Value="override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="selectExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Projection">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; Projection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; Projection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Projection As IReadOnlyList(Of ProjectionExpression)" />
      <MemberSignature Language="F#" Value="member this.Projection : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushdownIntoSubquery">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt; PushdownIntoSubquery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt; PushdownIntoSubquery() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.PushdownIntoSubquery" />
      <MemberSignature Language="VB.NET" Value="Public Function PushdownIntoSubquery () As IDictionary(Of SqlExpression, ColumnExpression)" />
      <MemberSignature Language="F#" Value="member this.PushdownIntoSubquery : unit -&gt; System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression, Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt;" Usage="selectExpression.PushdownIntoSubquery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProjectionMapping">
      <MemberSignature Language="C#" Value="public void ReplaceProjectionMapping (System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt; projectionMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceProjectionMapping(class System.Collections.Generic.IDictionary`2&lt;class Microsoft.EntityFrameworkCore.Query.ProjectionMember, class System.Linq.Expressions.Expression&gt; projectionMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReplaceProjectionMapping(System.Collections.Generic.IDictionary{Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceProjectionMapping (projectionMapping As IDictionary(Of ProjectionMember, Expression))" />
      <MemberSignature Language="F#" Value="member this.ReplaceProjectionMapping : System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember, System.Linq.Expressions.Expression&gt; -&gt; unit" Usage="selectExpression.ReplaceProjectionMapping projectionMapping" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectionMapping" Type="System.Collections.Generic.IDictionary&lt;Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="projectionMapping">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseOrderings">
      <MemberSignature Language="C#" Value="public void ReverseOrderings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReverseOrderings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReverseOrderings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReverseOrderings ()" />
      <MemberSignature Language="F#" Value="member this.ReverseOrderings : unit -&gt; unit" Usage="selectExpression.ReverseOrderings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; Tables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As IReadOnlyList(Of TableExpressionBase)" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tags">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ISet&lt;string&gt; Tags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ISet`1&lt;string&gt; Tags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tags As ISet(Of String)" />
      <MemberSignature Language="F#" Value="member this.Tags : System.Collections.Generic.ISet&lt;string&gt;" Usage="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ISet&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update (System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression havingExpression, System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset, bool distinct, string alias);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Update(class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; projections, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; tables, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression predicate, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; groupBy, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression havingExpression, class System.Collections.Generic.List`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; orderings, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression limit, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression offset, bool distinct, string alias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Update(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (projections As List(Of ProjectionExpression), tables As List(Of TableExpressionBase), predicate As SqlExpression, groupBy As List(Of SqlExpression), havingExpression As SqlExpression, orderings As List(Of OrderingExpression), limit As SqlExpression, offset As SqlExpression, distinct As Boolean, alias As String) As SelectExpression" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt; * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool * string -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="selectExpression.Update (projections, tables, predicate, groupBy, havingExpression, orderings, limit, offset, distinct, alias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projections" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression&gt;" />
        <Parameter Name="tables" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase&gt;" />
        <Parameter Name="predicate" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="groupBy" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="havingExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="orderings" Type="System.Collections.Generic.List&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression&gt;" />
        <Parameter Name="limit" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="offset" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="distinct" Type="System.Boolean" />
        <Parameter Name="alias" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="projections">To be added.</param>
        <param name="tables">To be added.</param>
        <param name="predicate">To be added.</param>
        <param name="groupBy">To be added.</param>
        <param name="havingExpression">To be added.</param>
        <param name="orderings">To be added.</param>
        <param name="limit">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="distinct">To be added.</param>
        <param name="alias">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="selectExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
