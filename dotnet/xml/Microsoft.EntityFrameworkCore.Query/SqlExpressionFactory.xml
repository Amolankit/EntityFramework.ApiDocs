<Type Name="SqlExpressionFactory" FullName="Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory">
  <TypeSignature Language="C#" Value="public class SqlExpressionFactory : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlExpressionFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlExpressionFactory&#xA;Implements ISqlExpressionFactory" />
  <TypeSignature Language="F#" Value="type SqlExpressionFactory = class&#xA;    interface ISqlExpressionFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlExpressionFactory (Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As SqlExpressionFactoryDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory : Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" Usage="new Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Add (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Add(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Add(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Add : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Add : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Add (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Add(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression And (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression And(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.And(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function And (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member And : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.And : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.And (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.And(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression AndAlso (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression AndAlso(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.AndAlso(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AndAlso (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member AndAlso : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.AndAlso : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.AndAlso (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.AndAlso(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDefaultTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression ApplyDefaultTypeMapping (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression ApplyDefaultTypeMapping(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.ApplyDefaultTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="F#" Value="abstract member ApplyDefaultTypeMapping : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.ApplyDefaultTypeMapping : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqlExpressionFactory.ApplyDefaultTypeMapping sqlExpression" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.ApplyDefaultTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTypeMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression ApplyTypeMapping (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression ApplyTypeMapping(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression sqlExpression, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="F#" Value="abstract member ApplyTypeMapping : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.ApplyTypeMapping : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqlExpressionFactory.ApplyTypeMapping (sqlExpression, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Case">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression Case (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, params Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] whenClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression Case(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] whenClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Case(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Case (operand As SqlExpression, ParamArray whenClauses As CaseWhenClause()) As CaseExpression" />
      <MemberSignature Language="F#" Value="abstract member Case : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression&#xA;override this.Case : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" Usage="sqlExpressionFactory.Case (operand, whenClauses)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Case(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="whenClauses" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[]">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <param name="whenClauses">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Case">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression Case (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause&gt; whenClauses, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression elseResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression Case(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause&gt; whenClauses, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression elseResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Case(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Case (whenClauses As IReadOnlyList(Of CaseWhenClause), elseResult As SqlExpression) As CaseExpression" />
      <MemberSignature Language="F#" Value="abstract member Case : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression&#xA;override this.Case : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause&gt; * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" Usage="sqlExpressionFactory.Case (whenClauses, elseResult)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Case(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenClauses" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause&gt;" />
        <Parameter Name="elseResult" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="whenClauses">To be added.</param>
        <param name="elseResult">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Case">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression Case (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression elseResult, params Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] whenClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression Case(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression elseResult, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] whenClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Case(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Case (operand As SqlExpression, elseResult As SqlExpression, ParamArray whenClauses As CaseWhenClause()) As CaseExpression" />
      <MemberSignature Language="F#" Value="abstract member Case : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression&#xA;override this.Case : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[] -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" Usage="sqlExpressionFactory.Case (operand, elseResult, whenClauses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="elseResult" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="whenClauses" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[]">
          <Attributes>
            <Attribute FrameworkAlternate="efcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <param name="elseResult">To be added.</param>
        <param name="whenClauses">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Coalesce (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Coalesce(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Coalesce(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Coalesce (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Coalesce : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Coalesce : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Coalesce (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Coalesce(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression Constant (object value, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression Constant(object value, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Constant(System.Object,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Constant (value As Object, Optional typeMapping As RelationalTypeMapping = null) As SqlConstantExpression" />
      <MemberSignature Language="F#" Value="abstract member Constant : obj * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression&#xA;override this.Constant : obj * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression" Usage="sqlExpressionFactory.Constant (value, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Constant(System.Object,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression Convert (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression Convert(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Convert(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="F#" Value="abstract member Convert : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression&#xA;override this.Convert : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" Usage="sqlExpressionFactory.Convert (operand, type, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Convert(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Divide (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Divide(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Divide(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Divide (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Divide : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Divide : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Divide (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Divide(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Equal (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Equal(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Equal(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equal (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Equal : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Equal : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Equal (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Equal(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression Exists (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression subquery, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression Exists(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression subquery, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Exists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (subquery As SelectExpression, negated As Boolean) As ExistsExpression" />
      <MemberSignature Language="F#" Value="abstract member Exists : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression&#xA;override this.Exists : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression" Usage="sqlExpressionFactory.Exists (subquery, negated)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Exists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subquery" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="negated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="subquery">To be added.</param>
        <param name="negated">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMapping">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping FindMapping(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.FindMapping(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&#xA;override this.FindMapping : Type -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="sqlExpressionFactory.FindMapping type" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.FindMapping(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fragment">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression Fragment (string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression Fragment(string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Fragment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Fragment (sql As String) As SqlFragmentExpression" />
      <MemberSignature Language="F#" Value="abstract member Fragment : string -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression&#xA;override this.Fragment : string -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression" Usage="sqlExpressionFactory.Fragment sql" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Fragment(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function (string name, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function(string name, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (name As String, returnType As Type, Optional typeMapping As RelationalTypeMapping = null) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Function : string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqlExpressionFactory.Function (name, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, string name, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, string name, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (instance As SqlExpression, name As String, returnType As Type, Optional typeMapping As RelationalTypeMapping = null) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Function : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqlExpressionFactory.Function (instance, name, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="instance">To be added.</param>
        <param name="name">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function (string name, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function(string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (name As String, arguments As IEnumerable(Of SqlExpression), returnType As Type, Optional typeMapping As RelationalTypeMapping = null) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Function : string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqlExpressionFactory.Function (name, arguments, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function (string schema, string name, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function(string schema, string name, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (schema As String, name As String, returnType As Type, Optional typeMapping As RelationalTypeMapping = null) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Function : string * string * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqlExpressionFactory.Function (schema, name, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="schema">To be added.</param>
        <param name="name">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, string name, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression instance, string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (instance As SqlExpression, name As String, arguments As IEnumerable(Of SqlExpression), returnType As Type, Optional typeMapping As RelationalTypeMapping = null) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Function : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqlExpressionFactory.Function (instance, name, arguments, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="instance">To be added.</param>
        <param name="name">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function (string schema, string name, System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, Type returnType, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression Function(string schema, string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; arguments, class System.Type returnType, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Function (schema As String, name As String, arguments As IEnumerable(Of SqlExpression), returnType As Type, Optional typeMapping As RelationalTypeMapping = null) As SqlFunctionExpression" />
      <MemberSignature Language="F#" Value="abstract member Function : string * string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression&#xA;override this.Function : string * string * seq&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" Usage="sqlExpressionFactory.Function (schema, name, arguments, returnType, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="schema">To be added.</param>
        <param name="name">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeMappingForValue">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetTypeMappingForValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping GetTypeMappingForValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.GetTypeMappingForValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeMappingForValue (value As Object) As RelationalTypeMapping" />
      <MemberSignature Language="F#" Value="abstract member GetTypeMappingForValue : obj -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping&#xA;override this.GetTypeMappingForValue : obj -&gt; Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Usage="sqlExpressionFactory.GetTypeMappingForValue value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.GetTypeMappingForValue(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression GreaterThan (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression GreaterThan(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.GreaterThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GreaterThan (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member GreaterThan : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.GreaterThan : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.GreaterThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression GreaterThanOrEqual (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression GreaterThanOrEqual(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.GreaterThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GreaterThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.GreaterThanOrEqual : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.GreaterThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression In (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression item, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression subquery, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression In(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression item, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression subquery, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function In (item As SqlExpression, subquery As SelectExpression, negated As Boolean) As InExpression" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression&#xA;override this.In : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" Usage="sqlExpressionFactory.In (item, subquery, negated)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="subquery" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
        <Parameter Name="negated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="subquery">To be added.</param>
        <param name="negated">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression In (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression item, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression values, bool negated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression In(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression item, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression values, bool negated) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function In (item As SqlExpression, values As SqlExpression, negated As Boolean) As InExpression" />
      <MemberSignature Language="F#" Value="abstract member In : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression&#xA;override this.In : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" Usage="sqlExpressionFactory.In (item, values, negated)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="values" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="negated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="values">To be added.</param>
        <param name="negated">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression IsNotNull (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression IsNotNull(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.IsNotNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsNotNull (operand As SqlExpression) As SqlUnaryExpression" />
      <MemberSignature Language="F#" Value="abstract member IsNotNull : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression&#xA;override this.IsNotNull : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" Usage="sqlExpressionFactory.IsNotNull operand" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.IsNotNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression IsNull (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression IsNull(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.IsNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsNull (operand As SqlExpression) As SqlUnaryExpression" />
      <MemberSignature Language="F#" Value="abstract member IsNull : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression&#xA;override this.IsNull : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" Usage="sqlExpressionFactory.IsNull operand" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.IsNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression LessThan (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression LessThan(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.LessThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LessThan (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member LessThan : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.LessThan : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.LessThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression LessThanOrEqual (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression LessThanOrEqual(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.LessThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LessThanOrEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member LessThanOrEqual : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.LessThanOrEqual : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.LessThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Like">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression Like (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression match, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression pattern, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression escapeChar = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression Like(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression match, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression pattern, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression escapeChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Like(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Like (match As SqlExpression, pattern As SqlExpression, Optional escapeChar As SqlExpression = null) As LikeExpression" />
      <MemberSignature Language="F#" Value="abstract member Like : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression&#xA;override this.Like : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression" Usage="sqlExpressionFactory.Like (match, pattern, escapeChar)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Like(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="pattern" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="escapeChar" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="pattern">To be added.</param>
        <param name="escapeChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType operatorType, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeBinary (operatorType As ExpressionType, left As SqlExpression, right As SqlExpression, typeMapping As RelationalTypeMapping) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.MakeBinary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.MakeBinary (operatorType, left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, Type type, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType operatorType, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand, class System.Type type, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.MakeUnary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="F#" Value="abstract member MakeUnary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression&#xA;override this.MakeUnary : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Type * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" Usage="sqlExpressionFactory.MakeUnary (operatorType, operand, type, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.MakeUnary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="operand">To be added.</param>
        <param name="type">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Modulo (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Modulo(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Modulo(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Modulo (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Modulo : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Modulo : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Modulo (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Modulo(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Multiply (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Multiply(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Multiply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Multiply (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Multiply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Multiply : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Multiply (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Multiply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression Negate (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression Negate(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Negate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Negate (operand As SqlExpression) As SqlUnaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Negate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression&#xA;override this.Negate : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" Usage="sqlExpressionFactory.Negate operand" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Negate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression Not (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression Not(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Not(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Not (operand As SqlExpression) As SqlUnaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Not : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression&#xA;override this.Not : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" Usage="sqlExpressionFactory.Not operand" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Not(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression NotEqual (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression NotEqual(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.NotEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NotEqual (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member NotEqual : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.NotEqual : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.NotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.NotEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Or (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Or(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Or(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Or (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Or : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Or : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Or (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Or(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression OrElse (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression OrElse(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.OrElse(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OrElse (left As SqlExpression, right As SqlExpression) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member OrElse : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.OrElse : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.OrElse (left, right)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.OrElse(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Select (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Select(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Select (entityType As IEntityType) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression&#xA;override this.Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="sqlExpressionFactory.Select entityType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Select (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Select(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression projection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Select (projection As SqlExpression) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Select : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression&#xA;override this.Select : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="sqlExpressionFactory.Select projection" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
      </Parameters>
      <Docs>
        <param name="projection">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Select (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string sql, System.Linq.Expressions.Expression sqlArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression Select(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, string sql, class System.Linq.Expressions.Expression sqlArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Select (entityType As IEntityType, sql As String, sqlArguments As Expression) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression&#xA;override this.Select : Microsoft.EntityFrameworkCore.Metadata.IEntityType * string * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" Usage="sqlExpressionFactory.Select (entityType, sql, sqlArguments)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="sqlArguments" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="sql">To be added.</param>
        <param name="sqlArguments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Subtract (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression Subtract(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Subtract(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Subtract (left As SqlExpression, right As SqlExpression, Optional typeMapping As RelationalTypeMapping = null) As SqlBinaryExpression" />
      <MemberSignature Language="F#" Value="abstract member Subtract : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression&#xA;override this.Subtract : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Usage="sqlExpressionFactory.Subtract (left, right, typeMapping)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Subtract(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
