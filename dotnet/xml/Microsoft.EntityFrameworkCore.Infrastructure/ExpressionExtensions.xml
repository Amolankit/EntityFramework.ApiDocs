<Type Name="ExpressionExtensions" FullName="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions">
  <TypeSignature Language="C#" Value="public static class ExpressionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ExpressionExtensions" />
  <TypeSignature Language="F#" Value="type ExpressionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>
                    Extension methods for <see cref="T:System.Linq.Expressions.Expression" /> types.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression Assign (this System.Linq.Expressions.MemberExpression memberExpression, System.Linq.Expressions.Expression valueExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression Assign(class System.Linq.Expressions.MemberExpression memberExpression, class System.Linq.Expressions.Expression valueExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Assign(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="static member Assign : System.Linq.Expressions.MemberExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Assign (memberExpression, valueExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" RefType="this" />
        <Parameter Name="valueExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="memberExpression"> The member to which assignment will be made. </param>
        <param name="valueExpression"> The value that will be assigned. </param>
        <summary>
                Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.
            </summary>
        <returns> The <see cref="T:System.Linq.Expressions.BinaryExpression" /> representing the assignment binding. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccess">
      <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetPropertyAccess (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetPropertyAccess(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccess (propertyAccessExpression As LambdaExpression) As PropertyInfo" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccess : System.Linq.Expressions.LambdaExpression -&gt; System.Reflection.PropertyInfo" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccess propertyAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression"> The expression. </param>
        <summary>
          <para>
                    Gets the <see cref="T:System.Reflection.PropertyInfo" /> represented by a simple property-access expression.
                </para>
          <para>
                    This method is typically used to parse property access lambdas from fluent APIs.
                </para>
        </summary>
        <returns> The <see cref="T:System.Reflection.PropertyInfo" />. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyAccessList">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt; GetPropertyAccessList (this System.Linq.Expressions.LambdaExpression propertyAccessExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.PropertyInfo&gt; GetPropertyAccessList(class System.Linq.Expressions.LambdaExpression propertyAccessExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPropertyAccessList (propertyAccessExpression As LambdaExpression) As IReadOnlyList(Of PropertyInfo)" />
      <MemberSignature Language="F#" Value="static member GetPropertyAccessList : System.Linq.Expressions.LambdaExpression -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.GetPropertyAccessList propertyAccessExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessExpression" Type="System.Linq.Expressions.LambdaExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="propertyAccessExpression"> The expression. </param>
        <summary>
          <para>
                    Returns a list of <see cref="T:System.Reflection.PropertyInfo" /> extracted from the given simple
                    <see cref="T:System.Linq.Expressions.LambdaExpression" />.
                </para>
          <para>
                    Only simple expressions are supported, such as those used to reference a property.
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns> The list of referenced properties. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (this System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.MakeMemberAccess (expression, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression"> An <see cref="T:System.Linq.Expressions.Expression"></see> that represents the object that the member belongs to. </param>
        <param name="member"> The <see cref="T:System.Reflection.MemberInfo"></see> that describes the field or property to be accessed. </param>
        <summary>
                Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.
            </summary>
        <returns> The <see cref="T:System.Linq.Expressions.MemberExpression"></see> that results from calling the appropriate factory method. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static string Print (this System.Linq.Expressions.Expression expression, Nullable&lt;int&gt; characterLimit = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Print(class System.Linq.Expressions.Expression expression, valuetype System.Nullable`1&lt;int32&gt; characterLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Print(System.Linq.Expressions.Expression,System.Nullable{System.Int32})" />
      <MemberSignature Language="F#" Value="static member Print : System.Linq.Expressions.Expression * Nullable&lt;int&gt; -&gt; string" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.Print (expression, characterLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
        <Parameter Name="characterLimit" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression. </param>
        <param name="characterLimit"> An optional limit to the number of characters included. </param>
        <summary>
                Creates a printable string representation of the given expression.
            </summary>
        <returns> The printable representation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveConvert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression RemoveConvert (this System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression RemoveConvert(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="static member RemoveConvert : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.RemoveConvert expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression. </param>
        <summary>
          <para>
                    Returns a new expression with any see <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> or
                    <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> nodes removed from the head of the
                    given expression tree/
                </para>
          <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
        </summary>
        <returns> A new expression with converts at the head removed. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetEFPropertyArguments">
      <MemberSignature Language="C#" Value="public static bool TryGetEFPropertyArguments (this System.Linq.Expressions.MethodCallExpression methodCallExpression, out System.Linq.Expressions.Expression entityExpression, out string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetEFPropertyArguments(class System.Linq.Expressions.MethodCallExpression methodCallExpression, [out] class System.Linq.Expressions.Expression&amp; entityExpression, [out] string&amp; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.TryGetEFPropertyArguments(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression@,System.String@)" />
      <MemberSignature Language="F#" Value="static member TryGetEFPropertyArguments : System.Linq.Expressions.MethodCallExpression * Expression * string -&gt; bool" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions.TryGetEFPropertyArguments (methodCallExpression, entityExpression, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" RefType="this" />
        <Parameter Name="entityExpression" Type="System.Linq.Expressions.Expression" RefType="out" />
        <Parameter Name="propertyName" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression"> The method-call expression for <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" /></param>
        <param name="entityExpression"> The extracted entity access expression. </param>
        <param name="propertyName"> The accessed property name. </param>
        <summary>
                If the given a method-call expression represents a call to <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" />, then this
                method extracts the entity expression and property name.
            </summary>
        <returns> True if the method-call was for <see cref="M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)" />; false otherwise. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
