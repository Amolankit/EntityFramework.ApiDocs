<Type Name="CaseExpression" FullName="Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression">
  <TypeSignature Language="C#" Value="public class CaseExpression : System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CaseExpression extends System.Linq.Expressions.Expression implements class Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class CaseExpression&#xA;Inherits Expression&#xA;Implements IPrintable" />
  <TypeSignature Language="F#" Value="type CaseExpression = class&#xA;    inherit Expression&#xA;    interface IPrintable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                Represents a SQL CASE expression.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseExpression (params Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[] whenClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[] whenClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.#ctor(Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray whenClauses As CaseWhenClause())" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression : Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[] -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression whenClauses" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="whenClauses" Type="Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="whenClauses"> The list of when clauses. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseExpression (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; whenClauses, System.Linq.Expressions.Expression elseResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; whenClauses, class System.Linq.Expressions.Expression elseResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause},System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (whenClauses As IReadOnlyList(Of CaseWhenClause), elseResult As Expression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression (whenClauses, elseResult)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="whenClauses" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt;" />
        <Parameter Name="elseResult" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="whenClauses"> The list of when clauses. </param>
        <param name="elseResult"> The else result expression. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseExpression (System.Linq.Expressions.Expression operand, params Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[] whenClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression operand, class Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[] whenClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.#ctor(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (operand As Expression, ParamArray whenClauses As CaseWhenClause())" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[] -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression (operand, whenClauses)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="whenClauses" Type="Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="operand"> The case operand expression. </param>
        <param name="whenClauses"> The list of when clauses. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseExpression (System.Linq.Expressions.Expression operand, System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; whenClauses, System.Linq.Expressions.Expression elseResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression operand, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; whenClauses, class System.Linq.Expressions.Expression elseResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.#ctor(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause},System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (operand As Expression, whenClauses As IReadOnlyList(Of CaseWhenClause), elseResult As Expression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression : System.Linq.Expressions.Expression * System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; * System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression (operand, whenClauses, elseResult)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="whenClauses" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt;" />
        <Parameter Name="elseResult" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="operand"> The case operand expression. </param>
        <param name="whenClauses"> The list of when clauses. </param>
        <param name="elseResult"> The else result expression. </param>
        <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="abstract member Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="caseExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"> The visitor to visit this node with. </param>
        <summary>
                Dispatches to the specific visit method for this node type.
            </summary>
        <returns> The result of visiting this node. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseResult">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ElseResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression ElseResult" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.ElseResult" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ElseResult As Expression" />
      <MemberSignature Language="F#" Value="member this.ElseResult : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.ElseResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the else result expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool&#xA;override this.Equals : obj -&gt; bool" Usage="caseExpression.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"> The object to compare with the current object. </param>
        <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
        <returns> true if the specified object is equal to the current object; otherwise, false. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int&#xA;override this.GetHashCode : unit -&gt; int" Usage="caseExpression.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Gets a hash code for the current object.
            </summary>
        <returns> The hash code. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable.Print">
      <MemberSignature Language="C#" Value="void IPrintable.Print (Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable.Print(class Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Microsoft#EntityFrameworkCore#Query#Expressions#Internal#IPrintable#Print(Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Expressions.Internal.IPrintable.Print(Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.Internal.ExpressionPrinter" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                 Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
        <value> One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Operand">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Operand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Operand" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Operand" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Operand As Expression" />
      <MemberSignature Language="F#" Value="member this.Operand : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Operand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the case operand expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="caseExpression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Returns a string that represents the current object.
            </summary>
        <returns> The string. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.
            </summary>
        <value> The <see cref="P:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.Type" /> that represents the static type of the expression. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="caseExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"> The visitor. </param>
        <summary>
                Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an
                exception if the node is not reducible.
            </summary>
        <returns> The expression being visited, or an expression which should replace it in the tree. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhenClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; WhenClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt; WhenClauses" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.WhenClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property WhenClauses As IReadOnlyList(Of CaseWhenClause)" />
      <MemberSignature Language="F#" Value="member this.WhenClauses : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Expressions.CaseExpression.WhenClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Query.Expressions.CaseWhenClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the list of when clauses.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
