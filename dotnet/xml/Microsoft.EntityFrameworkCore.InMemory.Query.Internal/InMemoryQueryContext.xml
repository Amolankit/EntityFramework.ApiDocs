<Type Name="InMemoryQueryContext" FullName="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext">
  <TypeSignature Language="C#" Value="public class InMemoryQueryContext : Microsoft.EntityFrameworkCore.Query.QueryContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InMemoryQueryContext extends Microsoft.EntityFrameworkCore.Query.QueryContext" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InMemoryQueryContext&#xA;Inherits QueryContext" />
  <TypeSignature Language="F#" Value="type InMemoryQueryContext = class&#xA;    inherit QueryContext" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.11.0</AssemblyVersion>
    <AssemblyVersion>2.2.6.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.QueryContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryQueryContext (Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore store);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore store) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies,Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryContextDependencies, store As IInMemoryStore)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies * Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext" Usage="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext (dependencies, store)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" Index="0" FrameworkAlternate="efcore-3.0;efcore-3.1" />
        <Parameter Name="store" Type="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore" Index="1" FrameworkAlternate="efcore-3.0;efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="store">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemoryQueryContext (Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory, Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore store);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies dependencies, class System.Func`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; queryBufferFactory, class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore store) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies,System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer},Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As QueryContextDependencies, queryBufferFactory As Func(Of IQueryBuffer), store As IInMemoryStore)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext : Microsoft.EntityFrameworkCore.Query.QueryContextDependencies * Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt; * Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore -&gt; Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext" Usage="new Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext (dependencies, queryBufferFactory, store)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.QueryContextDependencies" Index="0" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="queryBufferFactory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer&gt;" Index="1" FrameworkAlternate="efcore-2.1;efcore-2.2" />
        <Parameter Name="store" Type="Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore" Index="2" FrameworkAlternate="efcore-2.1;efcore-2.2" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="queryBufferFactory">To be added.</param>
        <param name="store">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Store">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore Store { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore Store" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext.Store" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Store As IInMemoryStore" />
      <MemberSignature Language="F#" Value="member this.Store : Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore" Usage="Microsoft.EntityFrameworkCore.InMemory.Query.Internal.InMemoryQueryContext.Store" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.InMemory</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.11.0</AssemblyVersion>
        <AssemblyVersion>2.2.6.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.InMemory.Storage.Internal.IInMemoryStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
