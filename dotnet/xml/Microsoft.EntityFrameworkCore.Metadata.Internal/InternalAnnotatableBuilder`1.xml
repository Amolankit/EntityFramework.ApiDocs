<Type Name="InternalAnnotatableBuilder&lt;TMetadata&gt;" FullName="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder&lt;TMetadata&gt;">
  <TypeSignature Language="C#" Value="public abstract class InternalAnnotatableBuilder&lt;TMetadata&gt; : Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder where TMetadata : ConventionAnnotatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InternalAnnotatableBuilder`1&lt;(class Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable) TMetadata&gt; extends Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class InternalAnnotatableBuilder(Of TMetadata)&#xA;Inherits InternalAnnotatableBuilder" />
  <TypeSignature Language="F#" Value="type InternalAnnotatableBuilder&lt;'Metadata (requires 'Metadata :&gt; ConventionAnnotatable)&gt; = class&#xA;    inherit InternalAnnotatableBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TMetadata">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TMetadata">To be added.</typeparam>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InternalAnnotatableBuilder (TMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(!TMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (metadata As TMetadata)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder&lt;'Metadata (requires 'Metadata :&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable)&gt; : 'Metadata -&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder&lt;'Metadata (requires 'Metadata :&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable)&gt;" Usage="new Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder&lt;'Metadata (requires 'Metadata :&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable)&gt; metadata" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="metadata" Type="TMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual TMetadata Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TMetadata Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder`1.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Metadata As TMetadata" />
      <MemberSignature Language="F#" Value="member this.Metadata : 'Metadata" Usage="Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder&lt;'Metadata (requires 'Metadata :&gt; Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable)&gt;.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
