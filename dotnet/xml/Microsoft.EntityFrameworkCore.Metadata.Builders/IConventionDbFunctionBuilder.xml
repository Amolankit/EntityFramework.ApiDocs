<Type Name="IConventionDbFunctionBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder">
  <TypeSignature Language="C#" Value="public interface IConventionDbFunctionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConventionDbFunctionBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionDbFunctionBuilder" />
  <TypeSignature Language="F#" Value="type IConventionDbFunctionBuilder = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanSetName">
      <MemberSignature Language="C#" Value="public bool CanSetName (string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetName(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetName (name As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetName : string * bool -&gt; bool" Usage="iConventionDbFunctionBuilder.CanSetName (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given name can be set for the database function.
            </summary>
        <returns>
          <c>true</c> if the given name can be set for the database function. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetSchema">
      <MemberSignature Language="C#" Value="public bool CanSetSchema (string schema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetSchema(string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetSchema (schema As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetSchema : string * bool -&gt; bool" Usage="iConventionDbFunctionBuilder.CanSetSchema (schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="schema"> The schema of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given schema can be set for the database function.
            </summary>
        <returns>
          <c>true</c> if the given schema can be set for the database function. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetStoreType">
      <MemberSignature Language="C#" Value="public bool CanSetStoreType (string storeType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetStoreType(string storeType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetStoreType (storeType As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetStoreType : string * bool -&gt; bool" Usage="iConventionDbFunctionBuilder.CanSetStoreType (storeType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeType" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storeType"> The store type of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given store type can be set for the database function.
            </summary>
        <returns>
          <c>true</c> if the given store type can be set for the database function. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetTranslation">
      <MemberSignature Language="C#" Value="public bool CanSetTranslation (Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetTranslation(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetTranslation (translation As Func(Of IReadOnlyCollection(Of SqlExpression), SqlExpression), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * bool -&gt; bool" Usage="iConventionDbFunctionBuilder.CanSetTranslation (translation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translation" Type="System.Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="translation"> The translation to use. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given translation can be set for the database function.
            </summary>
        <returns>
          <c>true</c> if the given translation can be set for the database function. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetTypeMapping">
      <MemberSignature Language="C#" Value="public bool CanSetTypeMapping (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetTypeMapping(class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetTypeMapping (typeMapping As RelationalTypeMapping, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * bool -&gt; bool" Usage="iConventionDbFunctionBuilder.CanSetTypeMapping (typeMapping, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeMapping"> The return type mapping of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given return type mapping can be set for the database function.
            </summary>
        <returns>
          <c>true</c> if the given return type mapping can be set for the database function. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasName">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasName (string name, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasName(string name, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasName (name As String, Optional fromDataAnnotation As Boolean = false) As IConventionDbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasName : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="iConventionDbFunctionBuilder.HasName (name, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the name of the database function.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSchema">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasSchema (string schema, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasSchema(string schema, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSchema (schema As String, Optional fromDataAnnotation As Boolean = false) As IConventionDbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasSchema : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="iConventionDbFunctionBuilder.HasSchema (schema, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="schema"> The schema of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the schema of the database function.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasStoreType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasStoreType (string storeType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasStoreType(string storeType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasStoreType (storeType As String, Optional fromDataAnnotation As Boolean = false) As IConventionDbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasStoreType : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="iConventionDbFunctionBuilder.HasStoreType (storeType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storeType" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storeType"> The store type of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the store type of the function in the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTranslation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasTranslation (Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasTranslation(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyCollection`1&lt;class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; translation, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasTranslation (translation As Func(Of IReadOnlyCollection(Of SqlExpression), SqlExpression), Optional fromDataAnnotation As Boolean = false) As IConventionDbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTranslation : Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="iConventionDbFunctionBuilder.HasTranslation (translation, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="translation" Type="System.Func&lt;System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="translation"> The translation to use. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
          <para>
                    Sets a callback that will be invoked to perform custom translation of this
                    function. The callback takes a collection of expressions corresponding to
                    the parameters passed to the function call. The callback should return an
                    expression representing the desired translation.
                </para>
          <para>
                    See https://go.microsoft.com/fwlink/?linkid=852477 for more information.
                </para>
        </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTypeMapping">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasTypeMapping (Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder HasTypeMapping(class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasTypeMapping (typeMapping As RelationalTypeMapping, Optional fromDataAnnotation As Boolean = false) As IConventionDbFunctionBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasTypeMapping : Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder" Usage="iConventionDbFunctionBuilder.HasTypeMapping (typeMapping, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeMapping"> The return type mapping of the function in the database. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the return type mapping of the database function.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Metadata As IConventionDbFunction" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The function being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
