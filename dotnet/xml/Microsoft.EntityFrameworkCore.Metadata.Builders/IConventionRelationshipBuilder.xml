<Type Name="IConventionRelationshipBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder">
  <TypeSignature Language="C#" Value="public interface IConventionRelationshipBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConventionRelationshipBuilder implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionRelationshipBuilder&#xA;Implements IConventionAnnotatableBuilder" />
  <TypeSignature Language="F#" Value="type IConventionRelationshipBuilder = interface&#xA;    interface IConventionAnnotatableBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API surface for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" /> from conventions.
                </para>
      <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanInvert">
      <MemberSignature Language="C#" Value="public bool CanInvert (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; newForeignKeyProperties, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanInvert(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; newForeignKeyProperties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanInvert(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanInvert (newForeignKeyProperties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanInvert : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanInvert (newForeignKeyProperties, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newForeignKeyProperties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="newForeignKeyProperties">
                The properties to be used as the new foreign key or <c>null</c> to use any compatible properties.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the principal and dependent entity types can be switched
                from the current configuration source
            </summary>
        <returns>
          <c>true</c> if the principal and dependent entity types can be switched. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetField">
      <MemberSignature Language="C#" Value="public bool CanSetField (System.Reflection.FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetField(class System.Reflection.FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetField(System.Reflection.FieldInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CanSetField : System.Reflection.FieldInfo * bool * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetField (fieldInfo, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldInfo"> The field. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the backing field can be set for a navigation
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the backing field can be set for this property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetField">
      <MemberSignature Language="C#" Value="public bool CanSetField (string fieldName, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetField(string fieldName, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetField(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetField (fieldName As String, pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetField : string * bool * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetField (fieldName, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldName"> The field name. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the backing field can be set for a navigation
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the backing field can be set for this property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetForeignKey">
      <MemberSignature Language="C#" Value="public bool CanSetForeignKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetForeignKey (properties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetForeignKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetForeignKey (properties, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties"> The properties to use as the foreign key for this relationship. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given properties can be set as the foreign key for this relationship
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given properties can be set as the foreign key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetForeignKey">
      <MemberSignature Language="C#" Value="public bool CanSetForeignKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetForeignKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetForeignKey (propertyNames As IReadOnlyList(Of String), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetForeignKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetForeignKey (propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyNames"> The properties to use as the foreign key for this relationship. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given properties can be set as the foreign key for this relationship
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given properties can be set as the foreign key. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsEagerLoaded">
      <MemberSignature Language="C#" Value="public bool CanSetIsEagerLoaded (Nullable&lt;bool&gt; eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsEagerLoaded(valuetype System.Nullable`1&lt;bool&gt; eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsEagerLoaded(System.Nullable{System.Boolean},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsEagerLoaded (eagerLoaded As Nullable(Of Boolean), pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsEagerLoaded : Nullable&lt;bool&gt; * bool * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetIsEagerLoaded (eagerLoaded, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eagerLoaded" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="eagerLoaded"> A value indicating whether this navigation should be eager loaded by default. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether this navigation can be configured as should be eager loaded by default
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if this navigation can be configured as should be eager loaded by default. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsOwnership">
      <MemberSignature Language="C#" Value="public bool CanSetIsOwnership (Nullable&lt;bool&gt; ownership, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsOwnership(valuetype System.Nullable`1&lt;bool&gt; ownership, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsOwnership(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsOwnership (ownership As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsOwnership : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetIsOwnership (ownership, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownership" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ownership">
                A value indicating whether this relationship defines an ownership.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether this relationship can be configured as defining an ownership or not
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the relationship can be configured as defining an ownership. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsRequired">
      <MemberSignature Language="C#" Value="public bool CanSetIsRequired (Nullable&lt;bool&gt; required, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsRequired (required As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsRequired : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetIsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">
                A value indicating whether this is a required relationship.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether this relationship requiredness can be configured
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the relationship requiredness can be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsUnique">
      <MemberSignature Language="C#" Value="public bool CanSetIsUnique (Nullable&lt;bool&gt; unique, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsUnique(valuetype System.Nullable`1&lt;bool&gt; unique, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsUnique(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsUnique (unique As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsUnique : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetIsUnique (unique, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unique" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unique">
                A value indicating whether the dependent entity is unique.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether this relationship uniqueness can be configured
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the relationship uniqueness can be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetNavigation">
      <MemberSignature Language="C#" Value="public bool CanSetNavigation (System.Reflection.MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetNavigation(class System.Reflection.MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigation(System.Reflection.MemberInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetNavigation (property As MemberInfo, pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetNavigation : System.Reflection.MemberInfo * bool * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetNavigation (property, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Reflection.MemberInfo" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="property"> The property to use. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given property can be used as a navigation for this relationship
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given property can be used as a navigation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetNavigation">
      <MemberSignature Language="C#" Value="public bool CanSetNavigation (string name, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigation(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetNavigation (name As String, pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetNavigation : string * bool * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetNavigation (name, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the property to use. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the property with the given name can be used as a navigation for this relationship
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given property can be used as a navigation. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetNavigations">
      <MemberSignature Language="C#" Value="public bool CanSetNavigations (System.Reflection.MemberInfo navigationToPrincipal, System.Reflection.MemberInfo navigationToDependent, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetNavigations(class System.Reflection.MemberInfo navigationToPrincipal, class System.Reflection.MemberInfo navigationToDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigations(System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetNavigations (navigationToPrincipal As MemberInfo, navigationToDependent As MemberInfo, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetNavigations : System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetNavigations (navigationToPrincipal, navigationToDependent, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationToPrincipal" Type="System.Reflection.MemberInfo" />
        <Parameter Name="navigationToDependent" Type="System.Reflection.MemberInfo" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigationToPrincipal">
                The property to use as the navigation to the principal entity type.
                Can be <c>null</c>.
            </param>
        <param name="navigationToDependent">
                The property to use as the navigation to the dependent entity type.
                Can be <c>null</c>.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given properties can be used as
                the navigation properties for this relationship from the current configuration source
            </summary>
        <returns>
          <c>true</c> if the given properties can be used as navigations. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetNavigations">
      <MemberSignature Language="C#" Value="public bool CanSetNavigations (string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigations(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetNavigations (navigationToPrincipalName As String, navigationToDependentName As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetNavigations : string * string * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetNavigations (navigationToPrincipalName, navigationToDependentName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationToPrincipalName" Type="System.String" />
        <Parameter Name="navigationToDependentName" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigationToPrincipalName">
                The name of the property to use as the navigation to the principal entity type.
                Can be <c>null</c>.
            </param>
        <param name="navigationToDependentName">
                The name of the property to use as the navigation to the dependent entity type.
                Can be <c>null</c>.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the properties with the given names can be used as
                the navigation properties for this relationship from the current configuration source
            </summary>
        <returns>
          <c>true</c> if the given properties can be used as navigations. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetOnDelete">
      <MemberSignature Language="C#" Value="public bool CanSetOnDelete (Nullable&lt;Microsoft.EntityFrameworkCore.DeleteBehavior&gt; deleteBehavior, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetOnDelete(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.DeleteBehavior&gt; deleteBehavior, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetOnDelete(System.Nullable{Microsoft.EntityFrameworkCore.DeleteBehavior},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetOnDelete (deleteBehavior As Nullable(Of DeleteBehavior), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetOnDelete : Nullable&lt;Microsoft.EntityFrameworkCore.DeleteBehavior&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetOnDelete (deleteBehavior, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteBehavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.DeleteBehavior&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deleteBehavior">
                The action to perform.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the operation on principal deletion can be configured
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the operation on principal deletion can be configured </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetPrincipalKey">
      <MemberSignature Language="C#" Value="public bool CanSetPrincipalKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetPrincipalKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetPrincipalKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetPrincipalKey (properties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetPrincipalKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetPrincipalKey (properties, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties"> The properties for this relationship to target. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given properties can be set as the target for this relationship
                from the current configuration source
            </summary>
        <returns>
          <c>true</c> if the given properties can be set as the target. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetPrincipalKey">
      <MemberSignature Language="C#" Value="public bool CanSetPrincipalKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetPrincipalKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetPrincipalKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetPrincipalKey (propertyNames As IReadOnlyList(Of String), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetPrincipalKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; bool" Usage="iConventionRelationshipBuilder.CanSetPrincipalKey (propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyNames"> The properties for this relationship to target. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given properties can be set as the target for this relationship
                from the current configuration source
            </summary>
        <returns>
          <c>true</c> if the given properties can be set as the target. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEntityTypes">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasEntityTypes (Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType dependentEntityType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasEntityTypes(class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType principalEntityType, class Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType dependentEntityType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasEntityTypes (principalEntityType As IConventionEntityType, dependentEntityType As IConventionEntityType, Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasEntityTypes : Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasEntityTypes (principalEntityType, dependentEntityType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
        <Parameter Name="dependentEntityType" Type="Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="principalEntityType"> The principal entity type to set. </param>
        <param name="dependentEntityType"> The dependent entity type to set. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures which entity types participate in this relationship.
                By calling this method the principal and dependent types can be switched or the relationship could
                be moved to a base type of one of the participating entity types.
            </summary>
        <returns>
                A builder instance if the entity types were configured as related,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasField (System.Reflection.FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasField(class System.Reflection.FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasField(System.Reflection.FieldInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member HasField : System.Reflection.FieldInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasField (fieldInfo, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldInfo"> The field. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the backing field to use for a navigation.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasField (string fieldName, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasField(string fieldName, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasField(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasField (fieldName As String, pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasField : string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasField (fieldName, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldName"> The field name. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the backing field to use for a navigation.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasForeignKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasForeignKey (properties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasForeignKey (properties, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties"> The properties to use as the foreign key for this relationship.</param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the properties to use as the foreign key for this relationship.
            </summary>
        <returns>
                The same builder instance if the properties were configured as the foreign key,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasForeignKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasForeignKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasForeignKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasForeignKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasForeignKey (propertyNames As IReadOnlyList(Of String), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasForeignKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasForeignKey (propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyNames"> The properties to use as the foreign key for this relationship.</param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the properties to use as the foreign key for this relationship.
            </summary>
        <returns>
                The same builder instance if the properties were configured as the foreign key,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigation (System.Reflection.MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigation(class System.Reflection.MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigation(System.Reflection.MemberInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNavigation (property As MemberInfo, pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNavigation : System.Reflection.MemberInfo * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasNavigation (property, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Reflection.MemberInfo" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="property"> The property to use. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the given property as a navigation property used by this relationship.
            </summary>
        <returns>
                The same builder instance if the navigation property was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigation (string name, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigation(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNavigation (name As String, pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNavigation : string * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasNavigation (name, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the property to use. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the property with the given name as a navigation property used by this relationship.
            </summary>
        <returns>
                The same builder instance if the navigation property was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNavigations">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigations (System.Reflection.MemberInfo navigationToPrincipal, System.Reflection.MemberInfo navigationToDependent, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigations(class System.Reflection.MemberInfo navigationToPrincipal, class System.Reflection.MemberInfo navigationToDependent, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigations(System.Reflection.MemberInfo,System.Reflection.MemberInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNavigations (navigationToPrincipal As MemberInfo, navigationToDependent As MemberInfo, Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNavigations : System.Reflection.MemberInfo * System.Reflection.MemberInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasNavigations (navigationToPrincipal, navigationToDependent, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationToPrincipal" Type="System.Reflection.MemberInfo" />
        <Parameter Name="navigationToDependent" Type="System.Reflection.MemberInfo" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigationToPrincipal">
                The property to use as the navigation to the principal entity type.
                Can be <c>null</c>.
            </param>
        <param name="navigationToDependent">
                The property to use as the navigation to the dependent entity type.
                Can be <c>null</c>.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the given properties as the navigation properties used by this relationship.
            </summary>
        <returns>
                The same builder instance if the navigation properties were configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNavigations">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigations (string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigations(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNavigations (navigationToPrincipalName As String, navigationToDependentName As String, Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasNavigations : string * string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasNavigations (navigationToPrincipalName, navigationToDependentName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationToPrincipalName" Type="System.String" />
        <Parameter Name="navigationToDependentName" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigationToPrincipalName">
                The name of the property to use as the navigation to the principal entity type.
                Can be <c>null</c>.
            </param>
        <param name="navigationToDependentName">
                The name of the property to use as the navigation to the dependent entity type.
                Can be <c>null</c>.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the properties with the given names as the navigation properties used by this relationship.
            </summary>
        <returns>
                The same builder instance if the navigation properties were configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasPrincipalKey (System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasPrincipalKey(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; properties, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasPrincipalKey(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IConventionProperty},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasPrincipalKey (properties As IReadOnlyList(Of IConventionProperty), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPrincipalKey : System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasPrincipalKey (properties, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.EntityFrameworkCore.Metadata.IConventionProperty&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="properties"> The properties for this relationship to target. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the properties that this relationship targets.
            </summary>
        <returns>
                The same builder instance if the properties were configured as the target for this relationship,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrincipalKey">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasPrincipalKey (System.Collections.Generic.IReadOnlyList&lt;string&gt; propertyNames, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder HasPrincipalKey(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; propertyNames, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasPrincipalKey(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasPrincipalKey (propertyNames As IReadOnlyList(Of String), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasPrincipalKey : System.Collections.Generic.IReadOnlyList&lt;string&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.HasPrincipalKey (propertyNames, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyNames"> The properties for this relationship to target. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the properties that this relationship targets.
            </summary>
        <returns>
                The same builder instance if the properties were configured as the target for this relationship,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEagerLoaded">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsEagerLoaded (Nullable&lt;bool&gt; eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsEagerLoaded(valuetype System.Nullable`1&lt;bool&gt; eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsEagerLoaded(System.Nullable{System.Boolean},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEagerLoaded (eagerLoaded As Nullable(Of Boolean), pointsToPrincipal As Boolean, Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsEagerLoaded : Nullable&lt;bool&gt; * bool * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.IsEagerLoaded (eagerLoaded, pointsToPrincipal, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eagerLoaded" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="pointsToPrincipal" Type="System.Boolean" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="eagerLoaded"> A value indicating whether this navigation should be eager loaded by default. </param>
        <param name="pointsToPrincipal">
                A value indicating whether the navigation is on the dependent type pointing to the principal type.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether this navigation should be eager loaded by default.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOwnership">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsOwnership (Nullable&lt;bool&gt; ownership, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsOwnership(valuetype System.Nullable`1&lt;bool&gt; ownership, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsOwnership(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOwnership (ownership As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsOwnership : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.IsOwnership (ownership, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownership" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ownership">
                A value indicating whether this relationship defines an ownership.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether this relationship defines an ownership
                (i.e. whether the dependent entity must always be accessed via the navigation from the principal entity).
            </summary>
        <returns>
                The same builder instance if the ownership was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsRequired (Nullable&lt;bool&gt; required, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsRequired (required As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsRequired : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.IsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">
                A value indicating whether this is a required relationship.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether this is a required relationship (i.e. whether none the foreign key properties can
                be assigned <c>null</c>).
            </summary>
        <returns>
                The same builder instance if the requiredness was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnique">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsUnique (Nullable&lt;bool&gt; unique, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder IsUnique(valuetype System.Nullable`1&lt;bool&gt; unique, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsUnique(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnique (unique As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsUnique : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.IsUnique (unique, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unique" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unique">
                A value indicating whether the dependent entity is unique.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether the dependent entity is unique
                (i.e. whether the navigation to the dependent entity type is not a collection).
            </summary>
        <returns>
                The same builder instance if the uniqueness was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Metadata As IConventionForeignKey" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The foreign key being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDelete">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder OnDelete (Nullable&lt;Microsoft.EntityFrameworkCore.DeleteBehavior&gt; deleteBehavior, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder OnDelete(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.DeleteBehavior&gt; deleteBehavior, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.OnDelete(System.Nullable{Microsoft.EntityFrameworkCore.DeleteBehavior},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnDelete (deleteBehavior As Nullable(Of DeleteBehavior), Optional fromDataAnnotation As Boolean = false) As IConventionRelationshipBuilder" />
      <MemberSignature Language="F#" Value="abstract member OnDelete : Nullable&lt;Microsoft.EntityFrameworkCore.DeleteBehavior&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder" Usage="iConventionRelationshipBuilder.OnDelete (deleteBehavior, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteBehavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.DeleteBehavior&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deleteBehavior">
                The action to perform.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the operation applied to dependent entities in the relationship when the
                principal is deleted or the relationship is severed.
            </summary>
        <returns>
                The same builder instance if the delete operation was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
