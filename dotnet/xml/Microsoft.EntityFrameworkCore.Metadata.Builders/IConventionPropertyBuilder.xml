<Type Name="IConventionPropertyBuilder" FullName="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder">
  <TypeSignature Language="C#" Value="public interface IConventionPropertyBuilder : Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConventionPropertyBuilder implements class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConventionPropertyBuilder&#xA;Implements IConventionAnnotatableBuilder" />
  <TypeSignature Language="F#" Value="type IConventionPropertyBuilder = interface&#xA;    interface IConventionAnnotatableBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    Provides a simple API surface for configuring an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" /> from conventions.
                </para>
      <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterSave">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder AfterSave (Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder AfterSave(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.AfterSave(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AfterSave (behavior As Nullable(Of PropertySaveBehavior), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member AfterSave : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.AfterSave (behavior, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="behavior">
                Sets a value indicating whether this property can be modified after the entity is
                saved to the database. <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether this property can be modified after the entity is saved to the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSave">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder BeforeSave (Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder BeforeSave(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.BeforeSave(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSave (behavior As Nullable(Of PropertySaveBehavior), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member BeforeSave : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.BeforeSave (behavior, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="behavior">
                A value indicating whether this property can be modified before the entity is
                saved to the database. <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether this property can be modified before the entity is saved to the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetAfterSave">
      <MemberSignature Language="C#" Value="public bool CanSetAfterSave (Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetAfterSave(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetAfterSave(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetAfterSave (behavior As Nullable(Of PropertySaveBehavior), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetAfterSave : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetAfterSave (behavior, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="behavior">
                A value indicating whether this property can be modified after the entity is
                saved to the database. <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the ability to be modified after the entity is saved to the database
                can be configured for this property from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the ability to be modified after the entity is saved to the database can be configured for this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetBeforeSave">
      <MemberSignature Language="C#" Value="public bool CanSetBeforeSave (Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetBeforeSave(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; behavior, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetBeforeSave(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetBeforeSave (behavior As Nullable(Of PropertySaveBehavior), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetBeforeSave : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetBeforeSave (behavior, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="behavior">
                A value indicating whether this property can be modified before the entity is
                saved to the database. <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the ability to be modified before the entity is saved to the database
                can be configured for this property from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the ability to be modified before the entity is saved to the database can be configured for this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetConversion">
      <MemberSignature Language="C#" Value="public bool CanSetConversion (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetConversion(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetConversion (converter As ValueConverter, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetConversion (converter, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="converter"> The converter to use. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> can be configured for this property
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" /> can be configured for this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetConversion">
      <MemberSignature Language="C#" Value="public bool CanSetConversion (Type providerClrType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetConversion(class System.Type providerClrType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetConversion(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetConversion (providerClrType As Type, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetConversion : Type * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetConversion (providerClrType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerClrType" Type="System.Type" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerClrType"> The type to convert to and from. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given type to convert values to and from
                can be configured for this property from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given type to convert values to and from can be configured for this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetField">
      <MemberSignature Language="C#" Value="public bool CanSetField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CanSetField : System.Reflection.FieldInfo * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldInfo"> The field. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the backing field can be set for this property
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the backing field can be set for this property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetField">
      <MemberSignature Language="C#" Value="public bool CanSetField (string fieldName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetField (fieldName As String, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetField : string * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldName"> The field name. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the backing field can be set for this property
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the backing field can be set for this property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsConcurrencyToken">
      <MemberSignature Language="C#" Value="public bool CanSetIsConcurrencyToken (Nullable&lt;bool&gt; concurrencyToken, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsConcurrencyToken(valuetype System.Nullable`1&lt;bool&gt; concurrencyToken, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsConcurrencyToken(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsConcurrencyToken (concurrencyToken As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsConcurrencyToken : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetIsConcurrencyToken (concurrencyToken, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concurrencyToken" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="concurrencyToken"> A value indicating whether this property is a concurrency token. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the property can be configured as a concurrency token
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the property can be configured as a concurrency token. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsRequired">
      <MemberSignature Language="C#" Value="public bool CanSetIsRequired (Nullable&lt;bool&gt; required, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsRequired (required As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsRequired : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetIsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">
                A value indicating whether the property is required.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether this property requiredness can be configured
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the property requiredness can be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetIsUnicode">
      <MemberSignature Language="C#" Value="public bool CanSetIsUnicode (Nullable&lt;bool&gt; unicode, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetIsUnicode(valuetype System.Nullable`1&lt;bool&gt; unicode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsUnicode(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetIsUnicode (unicode As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetIsUnicode : Nullable&lt;bool&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetIsUnicode (unicode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode"> A value indicating whether the property can contain unicode characters. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the property can be configured as capable of persisting unicode characters
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the capability of persisting unicode characters can be configured for this property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetKeyValueComparer">
      <MemberSignature Language="C#" Value="public bool CanSetKeyValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetKeyValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetKeyValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetKeyValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetKeyValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetKeyValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
                can be configured for this property from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> can be configured for this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetMaxLength">
      <MemberSignature Language="C#" Value="public bool CanSetMaxLength (Nullable&lt;int&gt; maxLength, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetMaxLength(valuetype System.Nullable`1&lt;int32&gt; maxLength, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetMaxLength(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetMaxLength (maxLength As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetMaxLength : Nullable&lt;int&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetMaxLength (maxLength, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="maxLength"> The maximum length of data allowed in the property. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the maximum length of data allowed can be set for this property
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the maximum length of data allowed can be set for this property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetPropertyAccessMode">
      <MemberSignature Language="C#" Value="public bool CanSetPropertyAccessMode (Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetPropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetPropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetPropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetPropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetPropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> can be set for this property
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> can be set for this property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetStructuralValueComparer">
      <MemberSignature Language="C#" Value="public bool CanSetStructuralValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetStructuralValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetStructuralValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetStructuralValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetStructuralValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetStructuralValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
                can be configured for this property from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> can be configured for this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetValueComparer">
      <MemberSignature Language="C#" Value="public bool CanSetValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
                can be configured for this property from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the given <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> can be configured for this property.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetValueGenerated">
      <MemberSignature Language="C#" Value="public bool CanSetValueGenerated (Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt; valueGenerated, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetValueGenerated(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt; valueGenerated, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueGenerated(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ValueGenerated},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetValueGenerated (valueGenerated As Nullable(Of ValueGenerated), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetValueGenerated : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetValueGenerated (valueGenerated, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueGenerated" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueGenerated">
                A value indicating when a value for this property will be generated by the database.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the property value generation can be configured
                from the current configuration source.
            </summary>
        <returns>
          <c>true</c> if the property value generation can be configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSetValueGenerator">
      <MemberSignature Language="C#" Value="public bool CanSetValueGenerator (Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; factory, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanSetValueGenerator(class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; factory, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueGenerator(System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanSetValueGenerator (factory As Func(Of IProperty, IEntityType, ValueGenerator), Optional fromDataAnnotation As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member CanSetValueGenerator : Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; * bool -&gt; bool" Usage="iConventionPropertyBuilder.CanSetValueGenerator (factory, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="factory"> A delegate that will be used to create value generator instances. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Returns a value indicating whether the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> can be configured for this property
                from the current configuration source.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasConversion (Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasConversion(class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter converter, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasConversion (converter As ValueConverter, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasConversion (converter, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converter" Type="Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="converter"> The converter to use. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the property so that the property value is converted to and from the database
                using the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConversion">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasConversion (Type providerClrType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasConversion(class System.Type providerClrType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasConversion(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasConversion (providerClrType As Type, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasConversion : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasConversion (providerClrType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerClrType" Type="System.Type" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerClrType"> The type to convert to and from. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the property so that the property value is converted to the given type before
                writing to the database and converted back when reading from the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasField (System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasField(class System.Reflection.FieldInfo fieldInfo, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasField(System.Reflection.FieldInfo,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member HasField : System.Reflection.FieldInfo * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasField (fieldInfo, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldInfo" Type="System.Reflection.FieldInfo" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldInfo"> The field. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the backing field to use for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasField">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasField (string fieldName, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasField(string fieldName, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasField(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasField (fieldName As String, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasField : string * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasField (fieldName, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldName"> The field name. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the backing field to use for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKeyValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasKeyValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasKeyValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasKeyValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasKeyValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasKeyValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasKeyValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to be used for key comparisons for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMaxLength">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasMaxLength (Nullable&lt;int&gt; maxLength, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasMaxLength(valuetype System.Nullable`1&lt;int32&gt; maxLength, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasMaxLength(System.Nullable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasMaxLength (maxLength As Nullable(Of Integer), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasMaxLength : Nullable&lt;int&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasMaxLength (maxLength, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="maxLength"> The maximum length of data allowed in the property. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the maximum length of data that can be stored in this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasStructuralValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasStructuralValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasStructuralValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasStructuralValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasStructuralValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasStructuralValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasStructuralValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> to be used for structural comparisons for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueComparer">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueComparer (Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueComparer(class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer comparer, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueComparer(Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasValueComparer (comparer As ValueComparer, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasValueComparer : Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasValueComparer (comparer, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="comparer"> The comparer, or <c>null</c> to remove any previously set comparer. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer" /> for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGenerator">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueGenerator (Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; factory, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueGenerator(class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Metadata.IEntityType, class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; factory, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueGenerator(System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasValueGenerator (factory As Func(Of IProperty, IEntityType, ValueGenerator), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasValueGenerator : Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasValueGenerator (factory, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="factory"> A delegate that will be used to create value generator instances. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValueGenerator">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueGenerator (Type valueGeneratorType, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder HasValueGenerator(class System.Type valueGeneratorType, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueGenerator(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasValueGenerator (valueGeneratorType As Type, Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasValueGenerator : Type * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.HasValueGenerator (valueGeneratorType, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueGeneratorType" Type="System.Type" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueGeneratorType"> A type that inherits from <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" /> that will generate values for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConcurrencyToken">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IsConcurrencyToken (Nullable&lt;bool&gt; concurrencyToken, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IsConcurrencyToken(valuetype System.Nullable`1&lt;bool&gt; concurrencyToken, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsConcurrencyToken(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsConcurrencyToken (concurrencyToken As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsConcurrencyToken : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.IsConcurrencyToken (concurrencyToken, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concurrencyToken" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="concurrencyToken"> A value indicating whether this property is a concurrency token. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether this property should be used as a concurrency token. When a property is configured
                as a concurrency token the value in the database will be checked when an instance of this entity type
                is updated or deleted during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> to ensure it has not changed since
                the instance was retrieved from the database. If it has changed, an exception will be thrown and the
                changes will not be applied to the database.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequired">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IsRequired (Nullable&lt;bool&gt; required, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IsRequired(valuetype System.Nullable`1&lt;bool&gt; required, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsRequired(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsRequired (required As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsRequired : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.IsRequired (required, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="required" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="required">
                A value indicating whether the property is required.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether this property must have a value assigned or <c>null</c> is a valid value.
                A property can only be configured as non-required if it is based on a CLR type that can be
                assigned <c>null</c>.
            </summary>
        <returns>
                The same builder instance if the requiredness was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicode">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IsUnicode (Nullable&lt;bool&gt; unicode, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder IsUnicode(valuetype System.Nullable`1&lt;bool&gt; unicode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsUnicode(System.Nullable{System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnicode (unicode As Nullable(Of Boolean), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member IsUnicode : Nullable&lt;bool&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.IsUnicode (unicode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unicode"> A value indicating whether the property can contain unicode characters. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Configures whether the property as capable of persisting unicode characters.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IConventionProperty Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IConventionProperty Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Metadata As IConventionProperty" />
      <MemberSignature Language="F#" Value="member this.Metadata : Microsoft.EntityFrameworkCore.Metadata.IConventionProperty" Usage="Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IConventionProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The property being configured.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePropertyAccessMode">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder UsePropertyAccessMode (Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder UsePropertyAccessMode(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; propertyAccessMode, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.UsePropertyAccessMode(System.Nullable{Microsoft.EntityFrameworkCore.PropertyAccessMode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function UsePropertyAccessMode (propertyAccessMode As Nullable(Of PropertyAccessMode), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member UsePropertyAccessMode : Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.UsePropertyAccessMode (propertyAccessMode, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessMode" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.PropertyAccessMode&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyAccessMode"> The <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property. </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.PropertyAccessMode" /> to use for this property.
            </summary>
        <returns>
                The same builder instance if the configuration was applied,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueGenerated">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ValueGenerated (Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt; valueGenerated, bool fromDataAnnotation = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder ValueGenerated(valuetype System.Nullable`1&lt;valuetype Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt; valueGenerated, bool fromDataAnnotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.ValueGenerated(System.Nullable{Microsoft.EntityFrameworkCore.Metadata.ValueGenerated},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueGenerated (valueGenerated As Nullable(Of ValueGenerated), Optional fromDataAnnotation As Boolean = false) As IConventionPropertyBuilder" />
      <MemberSignature Language="F#" Value="abstract member ValueGenerated : Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder" Usage="iConventionPropertyBuilder.ValueGenerated (valueGenerated, fromDataAnnotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueGenerated" Type="System.Nullable&lt;Microsoft.EntityFrameworkCore.Metadata.ValueGenerated&gt;" />
        <Parameter Name="fromDataAnnotation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueGenerated">
                A value indicating when a value for this property will be generated by the database.
                <c>null</c> to reset to default.
            </param>
        <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        <summary>
                Sets a value indicating when a value for this property will be generated by the database. Even when the
                property is set to be generated by the database, EF may still attempt to save a specific value (rather than
                having one generated by the database) when the entity is added and a value is assigned, or the property is
                marked as modified for an existing entity. See <see cref="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetBeforeSaveBehavior(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /> and
                <see cref="M:Microsoft.EntityFrameworkCore.PropertyExtensions.GetAfterSaveBehavior(Microsoft.EntityFrameworkCore.Metadata.IProperty)" /> for more information.
            </summary>
        <returns>
                The same builder instance if the requiredness was configured,
                <c>null</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
