<Type Name="SqlExpressionOptimizingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class SqlExpressionOptimizingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlExpressionOptimizingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlExpressionOptimizingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type SqlExpressionOptimizingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlExpressionOptimizingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, bool useRelationalNulls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, bool useRelationalNulls) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sqlExpressionFactory As ISqlExpressionFactory, useRelationalNulls As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory * bool -&gt; Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor (sqlExpressionFactory, useRelationalNulls)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
        <Parameter Name="useRelationalNulls" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="useRelationalNulls">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimplifyNullComparisonExpression">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression SimplifyNullComparisonExpression (System.Linq.Expressions.ExpressionType operatorType, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, bool leftNull, bool rightNull, Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression SimplifyNullComparisonExpression(valuetype System.Linq.Expressions.ExpressionType operatorType, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression left, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression right, bool leftNull, bool rightNull, class Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping typeMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.SimplifyNullComparisonExpression(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.Boolean,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SimplifyNullComparisonExpression (operatorType As ExpressionType, left As SqlExpression, right As SqlExpression, leftNull As Boolean, rightNull As Boolean, typeMapping As RelationalTypeMapping) As SqlExpression" />
      <MemberSignature Language="F#" Value="abstract member SimplifyNullComparisonExpression : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool * bool * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression&#xA;override this.SimplifyNullComparisonExpression : System.Linq.Expressions.ExpressionType * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression * bool * bool * Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping -&gt; Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Usage="sqlExpressionOptimizingExpressionVisitor.SimplifyNullComparisonExpression (operatorType, left, right, leftNull, rightNull, typeMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="System.Linq.Expressions.ExpressionType" Index="0" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="left" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="1" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="right" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" Index="2" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="leftNull" Type="System.Boolean" Index="3" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="rightNull" Type="System.Boolean" Index="4" FrameworkAlternate="efcore-3.1" />
        <Parameter Name="typeMapping" Type="Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" Index="5" FrameworkAlternate="efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="leftNull">To be added.</param>
        <param name="rightNull">To be added.</param>
        <param name="typeMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SqlExpressionFactory">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory SqlExpressionFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory SqlExpressionFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.SqlExpressionFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SqlExpressionFactory As ISqlExpressionFactory" />
      <MemberSignature Language="F#" Value="member this.SqlExpressionFactory : Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.SqlExpressionFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression extensionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression extensionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitExtension (extensionExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="sqlExpressionOptimizingExpressionVisitor.VisitExtension extensionExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="extensionExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlBinaryExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitSqlBinaryExpression (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression sqlBinaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSqlBinaryExpression(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression sqlBinaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.VisitSqlBinaryExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitSqlBinaryExpression (sqlBinaryExpression As SqlBinaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitSqlBinaryExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitSqlBinaryExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="sqlExpressionOptimizingExpressionVisitor.VisitSqlBinaryExpression sqlBinaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlBinaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" Index="0" FrameworkAlternate="efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sqlBinaryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSqlUnaryExpression">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitSqlUnaryExpression (Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression sqlUnaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSqlUnaryExpression(class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression sqlUnaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.VisitSqlUnaryExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function VisitSqlUnaryExpression (sqlUnaryExpression As SqlUnaryExpression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitSqlUnaryExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitSqlUnaryExpression : Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="sqlExpressionOptimizingExpressionVisitor.VisitSqlUnaryExpression sqlUnaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlUnaryExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" Index="0" FrameworkAlternate="efcore-3.1" />
      </Parameters>
      <Docs>
        <param name="sqlUnaryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
