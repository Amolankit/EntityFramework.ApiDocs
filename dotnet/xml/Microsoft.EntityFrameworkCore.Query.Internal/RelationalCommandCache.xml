<Type Name="RelationalCommandCache" FullName="Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache">
  <TypeSignature Language="C#" Value="public class RelationalCommandCache" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RelationalCommandCache extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache" />
  <TypeSignature Language="VB.NET" Value="Public Class RelationalCommandCache" />
  <TypeSignature Language="F#" Value="type RelationalCommandCache = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalCommandCache (Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache, Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory parameterNameGeneratorFactory, Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory querySqlGeneratorFactory, bool useRelationalNulls, Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache, class Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory sqlExpressionFactory, class Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory parameterNameGeneratorFactory, class Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory querySqlGeneratorFactory, bool useRelationalNulls, class Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory,System.Boolean,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memoryCache As IMemoryCache, sqlExpressionFactory As ISqlExpressionFactory, parameterNameGeneratorFactory As IParameterNameGeneratorFactory, querySqlGeneratorFactory As IQuerySqlGeneratorFactory, useRelationalNulls As Boolean, selectExpression As SelectExpression)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache : Microsoft.Extensions.Caching.Memory.IMemoryCache * Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory * Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory * Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory * bool * Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression -&gt; Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache (memoryCache, sqlExpressionFactory, parameterNameGeneratorFactory, querySqlGeneratorFactory, useRelationalNulls, selectExpression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memoryCache" Type="Microsoft.Extensions.Caching.Memory.IMemoryCache" />
        <Parameter Name="sqlExpressionFactory" Type="Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory" />
        <Parameter Name="parameterNameGeneratorFactory" Type="Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory" />
        <Parameter Name="querySqlGeneratorFactory" Type="Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory" />
        <Parameter Name="useRelationalNulls" Type="System.Boolean" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="memoryCache">To be added.</param>
        <param name="sqlExpressionFactory">To be added.</param>
        <param name="parameterNameGeneratorFactory">To be added.</param>
        <param name="querySqlGeneratorFactory">To be added.</param>
        <param name="useRelationalNulls">To be added.</param>
        <param name="selectExpression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelationalCommand">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GetRelationalCommand (System.Collections.Generic.IReadOnlyDictionary&lt;string,object&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Storage.IRelationalCommand GetRelationalCommand(class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache.GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationalCommand (parameters As IReadOnlyDictionary(Of String, Object)) As IRelationalCommand" />
      <MemberSignature Language="F#" Value="abstract member GetRelationalCommand : System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand&#xA;override this.GetRelationalCommand : System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; -&gt; Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" Usage="relationalCommandCache.GetRelationalCommand parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Storage.IRelationalCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
