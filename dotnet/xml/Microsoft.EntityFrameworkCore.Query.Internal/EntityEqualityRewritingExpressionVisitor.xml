<Type Name="EntityEqualityRewritingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class EntityEqualityRewritingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityEqualityRewritingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityEqualityRewritingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type EntityEqualityRewritingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Rewrites comparisons of entities (as opposed to comparisons of their properties) into comparison of their keys.
            </summary>
    <remarks>
                For example, an expression such as cs.Where(c =&gt; c == something) would be rewritten to cs.Where(c =&gt; c.Id == something.Id).
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityEqualityRewritingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext queryCompilationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.QueryCompilationContext -&gt; Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor queryCompilationContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.QueryCompilationContext" />
      </Parameters>
      <Docs>
        <param name="queryCompilationContext">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewrite">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Rewrite (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Rewrite(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.Rewrite(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="abstract member Rewrite : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.Rewrite : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.Rewrite expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RewriteAndVisitLambda">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.LambdaExpression RewriteAndVisitLambda (System.Linq.Expressions.LambdaExpression lambda, Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.LambdaExpression RewriteAndVisitLambda(class System.Linq.Expressions.LambdaExpression lambda, class Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor/EntityReferenceExpression source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.RewriteAndVisitLambda(System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RewriteAndVisitLambda (lambda As LambdaExpression, source As EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression) As LambdaExpression" />
      <MemberSignature Language="F#" Value="abstract member RewriteAndVisitLambda : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression -&gt; System.Linq.Expressions.LambdaExpression&#xA;override this.RewriteAndVisitLambda : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression -&gt; System.Linq.Expressions.LambdaExpression" Usage="entityEqualityRewritingExpressionVisitor.RewriteAndVisitLambda (lambda, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambda" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="source" Type="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="lambda">To be added.</param>
        <param name="source">To be added.</param>
        <summary>
                Replaces the lambda's single parameter with a type wrapper based on the given source, and then visits
                the lambda's body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RewriteAndVisitLambda">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.LambdaExpression RewriteAndVisitLambda (System.Linq.Expressions.LambdaExpression lambda, Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression source1, Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression source2);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.LambdaExpression RewriteAndVisitLambda(class System.Linq.Expressions.LambdaExpression lambda, class Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor/EntityReferenceExpression source1, class Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor/EntityReferenceExpression source2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.RewriteAndVisitLambda(System.Linq.Expressions.LambdaExpression,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RewriteAndVisitLambda (lambda As LambdaExpression, source1 As EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression, source2 As EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression) As LambdaExpression" />
      <MemberSignature Language="F#" Value="abstract member RewriteAndVisitLambda : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression * Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression -&gt; System.Linq.Expressions.LambdaExpression&#xA;override this.RewriteAndVisitLambda : System.Linq.Expressions.LambdaExpression * Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression * Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression -&gt; System.Linq.Expressions.LambdaExpression" Usage="entityEqualityRewritingExpressionVisitor.RewriteAndVisitLambda (lambda, source1, source2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambda" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="source1" Type="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityReferenceExpression" />
        <Parameter Name="source2" Type="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="lambda">To be added.</param>
        <param name="source1">To be added.</param>
        <param name="source2">To be added.</param>
        <summary>
                Replaces the lambda's two parameters with type wrappers based on the given sources, and then visits
                the lambda's body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RewriteEquality">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression RewriteEquality (bool equality, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression RewriteEquality(bool equality, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.RewriteEquality(System.Boolean,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RewriteEquality (equality As Boolean, left As Expression, right As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member RewriteEquality : bool * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.RewriteEquality : bool * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.RewriteEquality (equality, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="equality" Type="System.Boolean" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="equality">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
                Receives already-visited left and right operands of an equality expression and applies entity equality rewriting to them,
                if possible.
            </summary>
        <returns> The rewritten entity equality expression, or null if rewriting could not occur for some reason. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="protected static System.Linq.Expressions.Expression Unwrap (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Linq.Expressions.Expression Unwrap(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.Unwrap(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="static member Unwrap : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.Unwrap expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnwrapLastNavigation">
      <MemberSignature Language="C#" Value="protected static System.Linq.Expressions.Expression UnwrapLastNavigation (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Linq.Expressions.Expression UnwrapLastNavigation(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.UnwrapLastNavigation(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="static member UnwrapLastNavigation : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.UnwrapLastNavigation expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitBinary binaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryExpression" Type="System.Linq.Expressions.BinaryExpression" />
      </Parameters>
      <Docs>
        <param name="binaryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditional">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConditional (System.Linq.Expressions.ConditionalExpression conditionalExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConditional(class System.Linq.Expressions.ConditionalExpression conditionalExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitConditional : System.Linq.Expressions.ConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitConditional conditionalExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditionalExpression" Type="System.Linq.Expressions.ConditionalExpression" />
      </Parameters>
      <Docs>
        <param name="conditionalExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression constantExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression constantExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitConstant constantExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constantExpression" Type="System.Linq.Expressions.ConstantExpression" />
      </Parameters>
      <Docs>
        <param name="constantExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitContainsMethodCall">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitContainsMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitContainsMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitContainsMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitContainsMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitContainsMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitContainsMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExtension">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitExtension (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitExtension(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="abstract member VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitExtension : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitExtension expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinMethodCall">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitJoinMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitJoinMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitJoinMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitJoinMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitJoinMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitJoinMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMember">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMember (System.Linq.Expressions.MemberExpression memberExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMember(class System.Linq.Expressions.MemberExpression memberExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitMember : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitMember : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitMember memberExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="memberExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberInit">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMemberInit (System.Linq.Expressions.MemberInitExpression memberInitExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMemberInit(class System.Linq.Expressions.MemberInitExpression memberInitExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitMemberInit : System.Linq.Expressions.MemberInitExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitMemberInit : System.Linq.Expressions.MemberInitExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitMemberInit memberInitExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInitExpression" Type="System.Linq.Expressions.MemberInitExpression" />
      </Parameters>
      <Docs>
        <param name="memberInitExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodCall">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNew">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitNew (System.Linq.Expressions.NewExpression newExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitNew(class System.Linq.Expressions.NewExpression newExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitNew : System.Linq.Expressions.NewExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitNew : System.Linq.Expressions.NewExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitNew newExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
      </Parameters>
      <Docs>
        <param name="newExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNullConditional">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitNullConditional (Microsoft.EntityFrameworkCore.Query.NullConditionalExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitNullConditional(class Microsoft.EntityFrameworkCore.Query.NullConditionalExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitNullConditional(Microsoft.EntityFrameworkCore.Query.NullConditionalExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitNullConditional : Microsoft.EntityFrameworkCore.Query.NullConditionalExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitNullConditional : Microsoft.EntityFrameworkCore.Query.NullConditionalExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitNullConditional expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.EntityFrameworkCore.Query.NullConditionalExpression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOfType">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitOfType (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitOfType(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitOfType(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitOfType : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitOfType : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitOfType methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrderingMethodCall">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitOrderingMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitOrderingMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitOrderingMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitOrderingMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitOrderingMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitOrderingMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectMethodCall">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitSelectMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitSelectMethodCall(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitSelectMethodCall(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitSelectMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitSelectMethodCall : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitSelectMethodCall methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitTypeBinary (System.Linq.Expressions.TypeBinaryExpression typeBinaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitTypeBinary(class System.Linq.Expressions.TypeBinaryExpression typeBinaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeBinary : System.Linq.Expressions.TypeBinaryExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitTypeBinary : System.Linq.Expressions.TypeBinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitTypeBinary typeBinaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeBinaryExpression" Type="System.Linq.Expressions.TypeBinaryExpression" />
      </Parameters>
      <Docs>
        <param name="typeBinaryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitUnary (System.Linq.Expressions.UnaryExpression unaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitUnary(class System.Linq.Expressions.UnaryExpression unaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitUnary : System.Linq.Expressions.UnaryExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitUnary : System.Linq.Expressions.UnaryExpression -&gt; System.Linq.Expressions.Expression" Usage="entityEqualityRewritingExpressionVisitor.VisitUnary unaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryExpression" Type="System.Linq.Expressions.UnaryExpression" />
      </Parameters>
      <Docs>
        <param name="unaryExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
