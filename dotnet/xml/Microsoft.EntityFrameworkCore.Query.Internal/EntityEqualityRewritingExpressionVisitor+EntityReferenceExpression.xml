<Type Name="EntityEqualityRewritingExpressionVisitor+EntityReferenceExpression" FullName="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityReferenceExpression">
  <TypeSignature Language="C#" Value="protected class EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit EntityEqualityRewritingExpressionVisitor/EntityReferenceExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression" />
  <TypeSignature Language="VB.NET" Value="Protected Class EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression&#xA;Inherits Expression" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityReferenceExpression (System.Linq.Expressions.Expression underlying, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression underlying, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.#ctor(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlying As Expression, entityType As IEntityType)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IEntityType -&gt; Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression (underlying, entityType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="underlying" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
      </Parameters>
      <Docs>
        <param name="underlying">To be added.</param>
        <param name="entityType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityReferenceExpression (System.Linq.Expressions.Expression underlying, System.Collections.Generic.Dictionary&lt;string,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType&gt; dtoType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression underlying, class System.Collections.Generic.Dictionary`2&lt;string, valuetype Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor/EntityOrDtoType&gt; dtoType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.#ctor(System.Linq.Expressions.Expression,System.Collections.Generic.Dictionary{System.String,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlying As Expression, dtoType As Dictionary(Of String, EntityEqualityRewritingExpressionVisitor.EntityOrDtoType))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression : System.Linq.Expressions.Expression * System.Collections.Generic.Dictionary&lt;string, Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType&gt; -&gt; Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression (underlying, dtoType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="underlying" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="dtoType" Type="System.Collections.Generic.Dictionary&lt;System.String,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityOrDtoType&gt;" />
      </Parameters>
      <Docs>
        <param name="underlying">To be added.</param>
        <param name="dtoType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityReferenceExpression (System.Linq.Expressions.Expression underlying, Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Metadata.INavigation lastNavigation, System.Collections.Generic.Dictionary&lt;string,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType&gt; dtoType, bool subqueryTraversed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression underlying, class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Metadata.INavigation lastNavigation, class System.Collections.Generic.Dictionary`2&lt;string, valuetype Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor/EntityOrDtoType&gt; dtoType, bool subqueryTraversed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.#ctor(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.Dictionary{System.String,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlying As Expression, entityType As IEntityType, lastNavigation As INavigation, dtoType As Dictionary(Of String, EntityEqualityRewritingExpressionVisitor.EntityOrDtoType), subqueryTraversed As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression : System.Linq.Expressions.Expression * Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Metadata.INavigation * System.Collections.Generic.Dictionary&lt;string, Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType&gt; * bool -&gt; Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression (underlying, entityType, lastNavigation, dtoType, subqueryTraversed)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="underlying" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="lastNavigation" Type="Microsoft.EntityFrameworkCore.Metadata.INavigation" />
        <Parameter Name="dtoType" Type="System.Collections.Generic.Dictionary&lt;System.String,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityOrDtoType&gt;" />
        <Parameter Name="subqueryTraversed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="underlying">To be added.</param>
        <param name="entityType">To be added.</param>
        <param name="lastNavigation">To be added.</param>
        <param name="dtoType">To be added.</param>
        <param name="subqueryTraversed">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DtoType">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;string,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType&gt; DtoType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;string, valuetype Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor/EntityOrDtoType&gt; DtoType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.DtoType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DtoType As Dictionary(Of String, EntityEqualityRewritingExpressionVisitor.EntityOrDtoType)" />
      <MemberSignature Language="F#" Value="member this.DtoType : System.Collections.Generic.Dictionary&lt;string, Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityOrDtoType&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.DtoType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityOrDtoType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityType As IEntityType" />
      <MemberSignature Language="F#" Value="member this.EntityType : Microsoft.EntityFrameworkCore.Metadata.IEntityType" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.EntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IEntityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDtoType">
      <MemberSignature Language="C#" Value="public bool IsDtoType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDtoType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.IsDtoType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDtoType As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDtoType : bool" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.IsDtoType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEntityType">
      <MemberSignature Language="C#" Value="public bool IsEntityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEntityType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.IsEntityType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEntityType As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsEntityType : bool" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.IsEntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastNavigation">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Metadata.INavigation LastNavigation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Metadata.INavigation LastNavigation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.LastNavigation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastNavigation As INavigation" />
      <MemberSignature Language="F#" Value="member this.LastNavigation : Microsoft.EntityFrameworkCore.Metadata.INavigation" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.LastNavigation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.INavigation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public virtual void Print (Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Print(class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter expressionPrinter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)" />
      <MemberSignature Language="F#" Value="abstract member Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit&#xA;override this.Print : Microsoft.EntityFrameworkCore.Query.ExpressionPrinter -&gt; unit" Usage="entityReferenceExpression.Print expressionPrinter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrinter" Type="Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />
      </Parameters>
      <Docs>
        <param name="expressionPrinter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubqueryTraversed">
      <MemberSignature Language="C#" Value="public bool SubqueryTraversed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubqueryTraversed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.SubqueryTraversed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubqueryTraversed As Boolean" />
      <MemberSignature Language="F#" Value="member this.SubqueryTraversed : bool" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.SubqueryTraversed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="entityReferenceExpression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraverseProperty">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression TraverseProperty (string propertyName, System.Linq.Expressions.Expression destinationExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression TraverseProperty(string propertyName, class System.Linq.Expressions.Expression destinationExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.TraverseProperty(System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TraverseProperty (propertyName As String, destinationExpression As Expression) As Expression" />
      <MemberSignature Language="F#" Value="abstract member TraverseProperty : string * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.TraverseProperty : string * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="entityReferenceExpression.TraverseProperty (propertyName, destinationExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="destinationExpression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="destinationExpression">To be added.</param>
        <summary>
                Attempts to find <paramref name="propertyName" /> as a navigation from the current node,
                and if successful, returns a new <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression" /> wrapping the
                given expression. Otherwise returns the given expression without wrapping it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Type As Type" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Underlying">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Underlying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Underlying" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.Underlying" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Underlying As Expression" />
      <MemberSignature Language="F#" Value="member this.Underlying : System.Linq.Expressions.Expression" Usage="Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.Underlying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The underlying expression being wrapped.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression Update (System.Linq.Expressions.Expression newUnderlying);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor/EntityReferenceExpression Update(class System.Linq.Expressions.Expression newUnderlying) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.Update(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (newUnderlying As Expression) As EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.Expression -&gt; Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression" Usage="entityReferenceExpression.Update newUnderlying" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor+EntityReferenceExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newUnderlying" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="newUnderlying">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor.EntityReferenceExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="F#" Value="abstract member VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="entityReferenceExpression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
