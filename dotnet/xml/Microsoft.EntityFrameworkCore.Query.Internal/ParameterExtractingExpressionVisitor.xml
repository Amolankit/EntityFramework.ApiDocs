<Type Name="ParameterExtractingExpressionVisitor" FullName="Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor">
  <TypeSignature Language="C#" Value="public class ParameterExtractingExpressionVisitor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParameterExtractingExpressionVisitor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class ParameterExtractingExpressionVisitor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type ParameterExtractingExpressionVisitor = class&#xA;    inherit ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterExtractingExpressionVisitor (Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter evaluatableExpressionFilter, Microsoft.EntityFrameworkCore.Query.IParameterValues parameterValues, Type contextType, Microsoft.EntityFrameworkCore.Metadata.IModel model, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; logger, bool parameterize, bool generateContextAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter evaluatableExpressionFilter, class Microsoft.EntityFrameworkCore.Query.IParameterValues parameterValues, class System.Type contextType, class Microsoft.EntityFrameworkCore.Metadata.IModel model, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Query&gt; logger, bool parameterize, bool generateContextAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Query.IParameterValues,System.Type,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (evaluatableExpressionFilter As IEvaluatableExpressionFilter, parameterValues As IParameterValues, contextType As Type, model As IModel, logger As IDiagnosticsLogger(Of DbLoggerCategory.Query), parameterize As Boolean, generateContextAccessors As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor : Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter * Microsoft.EntityFrameworkCore.Query.IParameterValues * Type * Microsoft.EntityFrameworkCore.Metadata.IModel * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Query&gt; * bool * bool -&gt; Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor (evaluatableExpressionFilter, parameterValues, contextType, model, logger, parameterize, generateContextAccessors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="evaluatableExpressionFilter" Type="Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter" />
        <Parameter Name="parameterValues" Type="Microsoft.EntityFrameworkCore.Query.IParameterValues" />
        <Parameter Name="contextType" Type="System.Type" />
        <Parameter Name="model" Type="Microsoft.EntityFrameworkCore.Metadata.IModel" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Query&gt;" />
        <Parameter Name="parameterize" Type="System.Boolean" />
        <Parameter Name="generateContextAccessors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <param name="parameterValues">To be added.</param>
        <param name="contextType">To be added.</param>
        <param name="model">To be added.</param>
        <param name="logger">To be added.</param>
        <param name="parameterize">To be added.</param>
        <param name="generateContextAccessors">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractParameters">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression ExtractParameters (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression ExtractParameters(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.ExtractParameters(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="abstract member ExtractParameters : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.ExtractParameters : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.ExtractParameters expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Visit (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Visit(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.Visit(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="abstract member Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression&#xA;override this.Visit : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.Visit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinary">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitBinary (System.Linq.Expressions.BinaryExpression binaryExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitBinary(class System.Linq.Expressions.BinaryExpression binaryExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitBinary : System.Linq.Expressions.BinaryExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitBinary binaryExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryExpression" Type="System.Linq.Expressions.BinaryExpression" />
      </Parameters>
      <Docs>
        <param name="binaryExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstant">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitConstant (System.Linq.Expressions.ConstantExpression constantExpression);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitConstant(class System.Linq.Expressions.ConstantExpression constantExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitConstant : System.Linq.Expressions.ConstantExpression -&gt; System.Linq.Expressions.Expression" Usage="parameterExtractingExpressionVisitor.VisitConstant constantExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constantExpression" Type="System.Linq.Expressions.ConstantExpression" />
      </Parameters>
      <Docs>
        <param name="constantExpression">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
