<Type Name="SplitQueryResultCoordinator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator">
  <TypeSignature Language="C#" Value="public class SplitQueryResultCoordinator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SplitQueryResultCoordinator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator" />
  <TypeSignature Language="VB.NET" Value="Public Class SplitQueryResultCoordinator" />
  <TypeSignature Language="F#" Value="type SplitQueryResultCoordinator = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SplitQueryResultCoordinator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collections">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext&gt; Collections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext&gt; Collections" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.Collections" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Collections As IList(Of SplitQueryCollectionContext)" />
      <MemberSignature Language="F#" Value="member this.Collections : System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.Collections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReaders">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext&gt; DataReaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext&gt; DataReaders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.DataReaders" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataReaders As IList(Of SplitQueryDataReaderContext)" />
      <MemberSignature Language="F#" Value="member this.DataReaders : System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext&gt;" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.DataReaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultContext">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Internal.ResultContext ResultContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Internal.ResultContext ResultContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.ResultContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResultContext As ResultContext" />
      <MemberSignature Language="F#" Value="member this.ResultContext : Microsoft.EntityFrameworkCore.Query.Internal.ResultContext" Usage="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.ResultContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.ResultContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataReader">
      <MemberSignature Language="C#" Value="public virtual void SetDataReader (int collectionId, Microsoft.EntityFrameworkCore.Storage.RelationalDataReader relationalDataReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataReader(int32 collectionId, class Microsoft.EntityFrameworkCore.Storage.RelationalDataReader relationalDataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.SetDataReader(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDataReader (collectionId As Integer, relationalDataReader As RelationalDataReader)" />
      <MemberSignature Language="F#" Value="abstract member SetDataReader : int * Microsoft.EntityFrameworkCore.Storage.RelationalDataReader -&gt; unit&#xA;override this.SetDataReader : int * Microsoft.EntityFrameworkCore.Storage.RelationalDataReader -&gt; unit" Usage="splitQueryResultCoordinator.SetDataReader (collectionId, relationalDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="relationalDataReader" Type="Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="relationalDataReader">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSplitQueryCollectionContext">
      <MemberSignature Language="C#" Value="public virtual void SetSplitQueryCollectionContext (int collectionId, Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext splitQueryCollectionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSplitQueryCollectionContext(int32 collectionId, class Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext splitQueryCollectionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.SetSplitQueryCollectionContext(System.Int32,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetSplitQueryCollectionContext (collectionId As Integer, splitQueryCollectionContext As SplitQueryCollectionContext)" />
      <MemberSignature Language="F#" Value="abstract member SetSplitQueryCollectionContext : int * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext -&gt; unit&#xA;override this.SetSplitQueryCollectionContext : int * Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext -&gt; unit" Usage="splitQueryResultCoordinator.SetSplitQueryCollectionContext (collectionId, splitQueryCollectionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.Int32" />
        <Parameter Name="splitQueryCollectionContext" Type="Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext" />
      </Parameters>
      <Docs>
        <param name="collectionId">To be added.</param>
        <param name="splitQueryCollectionContext">To be added.</param>
        <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
