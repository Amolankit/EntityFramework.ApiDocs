<Type Name="QueryableExtensions" FullName="System.Data.Entity.QueryableExtensions">
  <TypeSignature Language="C#" Value="public static class QueryableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit QueryableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.QueryableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module QueryableExtensions" />
  <TypeSignature Language="F#" Value="type QueryableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Useful extension methods for use with Entity Framework LINQ queries.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsNoTracking">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsNoTracking (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsNoTracking(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking (source As IQueryable) As IQueryable" />
      <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.AsNoTracking source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"> The source query. </param>
        <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
        <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsNoTracking&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; AsNoTracking&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; AsNoTracking&lt;class T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsNoTracking(Of T As Class) (source As IQueryable(Of T)) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member AsNoTracking : System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; -&gt; System.Linq.IQueryable&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="System.Data.Entity.QueryableExtensions.AsNoTracking source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The element type. </typeparam>
        <param name="source"> The source query. </param>
        <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
            or <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have an AsNoTracking method,
            then calling this method will have no affect.
            </summary>
        <returns> A new query with NoTracking applied, or the source query if NoTracking is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStreaming">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsStreaming (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsStreaming(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreaming (source As IQueryable) As IQueryable" />
      <MemberSignature Language="F#" Value="static member AsStreaming : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.AsStreaming source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable" /> to apply AsStreaming to.
            </param>
        <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
        <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStreaming&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; AsStreaming&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; AsStreaming&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreaming(Of T) (source As IQueryable(Of T)) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member AsStreaming : System.Linq.IQueryable&lt;'T&gt; -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.AsStreaming source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("LINQ queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The type of the elements of <paramref name="source" />.
            </typeparam>
        <param name="source">
            An <see cref="T:System.Linq.IQueryable`1" /> to apply AsStreaming to.
            </param>
        <summary>
            Returns a new query that will stream the results instead of buffering. This method works by calling
            the AsStreaming method of the underlying query object. If the underlying query object does not have
            an AsStreaming method, then calling this method will have no affect.
            </summary>
        <returns> A new query with AsStreaming applied, or the source query if AsStreaming is not supported. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable Include (this System.Linq.IQueryable source, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable Include(class System.Linq.IQueryable source, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include (source As IQueryable, path As String) As IQueryable" />
      <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable * string -&gt; System.Linq.IQueryable" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
            The source <see cref="T:System.Linq.IQueryable" /> on which to call Include.
            </param>
        <param name="path"> The dot-separated list of related objects to return in the query results. </param>
        <summary>
            Specifies the related objects to include in the query results.
            </summary>
        <returns>
            A new <see cref="T:System.Linq.IQueryable" /> with the defined query path.
            </returns>
        <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable" /> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable" /> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> and <see cref="T:System.Data.Entity.DbSet" /> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable" />. Other instances of <see cref="T:System.Linq.IQueryable" />
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable" /> to specify multiple paths for the query.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Include&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; source, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T) (source As IQueryable(Of T), path As String) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T&gt; * string -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The type of entity being queried. </typeparam>
        <param name="source">
            The source <see cref="T:System.Linq.IQueryable`1" /> on which to call Include.
            </param>
        <param name="path"> The dot-separated list of related objects to return in the query results. </param>
        <summary>
            Specifies the related objects to include in the query results.
            </summary>
        <returns>
            A new <see cref="T:System.Linq.IQueryable`1" /> with the defined query path.
            </returns>
        <remarks>
            This extension method calls the Include(String) method of the source <see cref="T:System.Linq.IQueryable`1" /> object,
            if such a method exists. If the source <see cref="T:System.Linq.IQueryable`1" /> does not have a matching method,
            then this method does nothing. The <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />,
            <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> and <see cref="T:System.Data.Entity.DbSet`1" /> types all have an appropriate Include method to call.
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the <see cref="T:System.Linq.IQueryable`1" />. Other instances of <see cref="T:System.Linq.IQueryable`1" />
            and the object context itself are not affected. Because the Include method returns the query object,
            you can call this method multiple times on an <see cref="T:System.Linq.IQueryable`1" /> to specify multiple paths for the query.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Include&lt;T,TProperty&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;T&gt; Include&lt;T,TProperty&gt; (this System.Linq.IQueryable&lt;T&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;T,TProperty&gt;&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!T&gt; Include&lt;T, TProperty&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, !!TProperty&gt;&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Include(Of T, TProperty) (source As IQueryable(Of T), path As Expression(Of Func(Of T, TProperty))) As IQueryable(Of T)" />
      <MemberSignature Language="F#" Value="static member Include : System.Linq.IQueryable&lt;'T&gt; * System.Linq.Expressions.Expression&lt;Func&lt;'T, 'Property&gt;&gt; -&gt; System.Linq.IQueryable&lt;'T&gt;" Usage="System.Data.Entity.QueryableExtensions.Include (source, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
        <Parameter Name="path" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The type of entity being queried. </typeparam>
        <typeparam name="TProperty"> The type of navigation property being included. </typeparam>
        <param name="source"> The source IQueryable on which to call Include. </param>
        <param name="path"> A lambda expression representing the path to include. </param>
        <summary>
            Specifies the related objects to include in the query results.
            </summary>
        <returns>
            A new IQueryable&lt;T&gt; with the defined query path.
            </returns>
        <remarks>
            The path expression must be composed of simple property access expressions together with calls to Select for
            composing additional includes after including a collection proprty.  Examples of possible include paths are:
            To include a single reference: query.Include(e =&gt; e.Level1Reference)
            To include a single collection: query.Include(e =&gt; e.Level1Collection)
            To include a reference and then a reference one level down: query.Include(e =&gt; e.Level1Reference.Level2Reference)
            To include a reference and then a collection one level down: query.Include(e =&gt; e.Level1Reference.Level2Collection)
            To include a collection and then a reference one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Collection))
            To include a collection and then a reference one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Reference))
            To include a collection and then a collection one level down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Collection))
            To include a collection, a reference, and a reference two levels down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Reference.Level3Reference))
            To include a collection, a collection, and a reference two levels down: query.Include(e =&gt; e.Level1Collection.Select(l1 =&gt; l1.Level2Collection.Select(l2 =&gt; l2.Level3Reference)))
            This extension method calls the Include(String) method of the source IQueryable object, if such a method exists.
            If the source IQueryable does not have a matching method, then this method does nothing.
            The Entity Framework ObjectQuery, ObjectSet, DbQuery, and DbSet types all have an appropriate Include method to call.
            When you call the Include method, the query path is only valid on the returned instance of the IQueryable&lt;T&gt;. Other
            instances of IQueryable&lt;T&gt; and the object context itself are not affected.  Because the Include method returns the
            query object, you can call this method multiple times on an IQueryable&lt;T&gt; to specify multiple paths for the query.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static void Load (this System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Load(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Load (source As IQueryable)" />
      <MemberSignature Language="F#" Value="static member Load : System.Linq.IQueryable -&gt; unit" Usage="System.Data.Entity.QueryableExtensions.Load source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"> The source query. </param>
        <summary>
            Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated
            <see cref="T:System.Data.Entity.DbContext" />
            ,
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; countAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;int32&gt;&gt; countAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IQueryable(Of TSource), countAccessor As Expression(Of Func(Of Integer))) As IQueryable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Skip : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.Skip (source, countAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="countAccessor" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence to return elements from.</param>
        <param name="countAccessor">An expression that evaluates to the number of elements to skip.</param>
        <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
        <returns>A sequence that contains elements that occur after the specified index in the 
            input sequence.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; countAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`1&lt;int32&gt;&gt; countAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IQueryable(Of TSource), countAccessor As Expression(Of Func(Of Integer))) As IQueryable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Take : System.Linq.IQueryable&lt;'Source&gt; * System.Linq.Expressions.Expression&lt;Func&lt;int&gt;&gt; -&gt; System.Linq.IQueryable&lt;'Source&gt;" Usage="System.Data.Entity.QueryableExtensions.Take (source, countAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="countAccessor" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">The sequence to return elements from.</param>
        <param name="countAccessor">An expression that evaluates to the number of elements 
            to return.</param>
        <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
        <returns>A sequence that contains the specified number of elements from the 
            start of the input sequence.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>